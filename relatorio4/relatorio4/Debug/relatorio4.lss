
relatorio4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004b2  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000004b2  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000004b2  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  000004e1  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bb9  00000000  00000000  0000055f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000670  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046d  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00001bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00001d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d2  00000000  00000000  00001f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002136  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000003ae  000003ae  000004a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002198  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.inicia_timer1 0000001e  0000036a  0000036a  0000045e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.inicia_timer0 00000010  0000039e  0000039e  00000492  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.debouncing_pc0 0000005e  000001ae  000001ae  000002a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.debouncing_pc1 0000005e  0000020c  0000020c  00000300  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.atualiza_display 0000005e  0000026a  0000026a  0000035e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.incrementa_contador 00000026  00000320  00000320  00000414  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_11 0000002a  000002f6  000002f6  000003ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__vector_14 00000064  0000014a  0000014a  0000023e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_4 0000006c  000000de  000000de  000001d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.setup   00000024  00000346  00000346  0000043a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.main    0000002e  000002c8  000002c8  000003bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .bss.unidade  00000001  00800106  00800106  000004b2  2**0
                  ALLOC
 27 .bss.dezena   00000001  00800107  00800107  000004b2  2**0
                  ALLOC
 28 .bss.contador_timer1 00000001  00800108  00800108  000004b2  2**0
                  ALLOC
 29 .bss.contador_timer0 00000001  00800109  00800109  000004b2  2**0
                  ALLOC
 30 .data.tempo_debounce 00000001  0080010a  000003bc  000004b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 31 .bss.flag_pc1 00000001  0080010b  0080010b  000004b2  2**0
                  ALLOC
 32 .bss.flag_pc0 00000001  0080010c  0080010c  000004b2  2**0
                  ALLOC
 33 .bss.zerado   00000001  0080010d  0080010d  000004b2  2**0
                  ALLOC
 34 .data.pausado 00000001  0080010e  000003bd  000004b1  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 35 .progmemx.data.decodificador_7seg 0000000a  000000d4  000000d4  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 36 .text.__dummy_fini 00000002  000003b6  000003b6  000004aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__dummy_funcs_on_exit 00000002  000003b8  000003b8  000004ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.__dummy_simulator_exit 00000002  000003ba  000003ba  000004ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.exit    00000016  00000388  00000388  0000047c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text._Exit   00000004  000003b2  000003b2  000004a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
   4:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
   8:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
   c:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_4>
  14:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
  18:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
  1c:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
  20:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
  24:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
  28:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
  2c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__vector_11>
  30:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
  34:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
  38:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_14>
  3c:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
  40:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
  44:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
  48:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
  4c:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
  50:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
  54:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
  58:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
  5c:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
  60:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
  64:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 0a       	sbc	r0, r17
  6c:	80 01       	movw	r16, r0
  6e:	0a 01       	movw	r0, r20
  70:	0b 00       	.word	0x000b	; ????
  72:	03 bc       	out	0x23, r0	; 35
  74:	01 0b       	sbc	r16, r17
  76:	01 0e       	add	r0, r17
  78:	80 01       	movw	r16, r0
  7a:	0e 01       	movw	r0, r28
  7c:	0f 00       	.word	0x000f	; ????
  7e:	03 bd       	out	0x23, r16	; 35

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	d8 e0       	ldi	r29, 0x08	; 8
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
  8c:	e8 e6       	ldi	r30, 0x68	; 104
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	17 c0       	rjmp	.+46     	; 0xc2 <__do_clear_bss+0x8>
  94:	b5 91       	lpm	r27, Z+
  96:	a5 91       	lpm	r26, Z+
  98:	35 91       	lpm	r19, Z+
  9a:	25 91       	lpm	r18, Z+
  9c:	05 91       	lpm	r16, Z+
  9e:	07 fd       	sbrc	r16, 7
  a0:	0c c0       	rjmp	.+24     	; 0xba <__do_clear_bss>
  a2:	95 91       	lpm	r25, Z+
  a4:	85 91       	lpm	r24, Z+
  a6:	ef 01       	movw	r28, r30
  a8:	f9 2f       	mov	r31, r25
  aa:	e8 2f       	mov	r30, r24
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0x20>
  b6:	fe 01       	movw	r30, r28
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <__do_clear_bss+0x8>

000000ba <__do_clear_bss>:
  ba:	1d 92       	st	X+, r1
  bc:	a2 17       	cp	r26, r18
  be:	b3 07       	cpc	r27, r19
  c0:	e1 f7       	brne	.-8      	; 0xba <__do_clear_bss>
  c2:	e0 38       	cpi	r30, 0x80	; 128
  c4:	f4 07       	cpc	r31, r20
  c6:	31 f7       	brne	.-52     	; 0x94 <__do_copy_data+0x8>
  c8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <main>
  cc:	0c 94 c4 01 	jmp	0x388	; 0x388 <exit>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>

Disassembly of section .text:

000003ae <__bad_interrupt>:
 3ae:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.inicia_timer1:

0000036a <inicia_timer1>:
unsigned char dezena = 0;
unsigned char unidade = 0;

void inicia_timer1(){
	//REINICIA TIMER1 SEMPRE QUE ATUALIZA DISPLAY
	TCCR1A = 0b00000010; //CTC Mode
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0b00000101; //PRESCALER = 1024
 370:	95 e0       	ldi	r25, 0x05	; 5
 372:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 97; //97*(1us)*1024 = 99,328ms
 376:	21 e6       	ldi	r18, 0x61	; 97
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 37e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = 0b00000010; //Habilita interrupção na comparação com OCR1A
 382:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 386:	08 95       	ret

Disassembly of section .text.inicia_timer0:

0000039e <inicia_timer0>:
}
void inicia_timer0(){
	// TIMER0
	TCCR0A = 0b00000010; // CTC Mode
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000010; // PRESCALER = 8
 3a2:	85 bd       	out	0x25, r24	; 37
	OCR0A = 124; // 125*(1us)*8 = 1ms
 3a4:	9c e7       	ldi	r25, 0x7C	; 124
 3a6:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b00000010; // Habilita interrupção na comparação com OCR0A
 3a8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 3ac:	08 95       	ret

Disassembly of section .text.debouncing_pc0:

000001ae <debouncing_pc0>:
}
void debouncing_pc0(){
	estado_atual_pc0 = (PINC & (1 << PINC0));
 1ae:	86 b1       	in	r24, 0x06	; 6
 1b0:	81 70       	andi	r24, 0x01	; 1
 1b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <estado_atual_pc0>
	if((estado_atual_pc0 == estado_passado_pc0) && (pc0_pressionado ==1)){
 1b6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <estado_passado_pc0>
 1ba:	89 13       	cpse	r24, r25
 1bc:	06 c0       	rjmp	.+12     	; 0x1ca <debouncing_pc0+0x1c>
 1be:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <pc0_pressionado>
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	11 f4       	brne	.+4      	; 0x1ca <debouncing_pc0+0x1c>
		flag_pc0 = 1;
 1c6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <flag_pc0>
	}
	if((pc0_pressionado ==0) && (flag_pc0 == 1) && (pausado == 1)){
 1ca:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <pc0_pressionado>
 1ce:	81 11       	cpse	r24, r1
 1d0:	0d c0       	rjmp	.+26     	; 0x1ec <debouncing_pc0+0x3e>
 1d2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <flag_pc0>
 1d6:	91 30       	cpi	r25, 0x01	; 1
 1d8:	49 f4       	brne	.+18     	; 0x1ec <debouncing_pc0+0x3e>
 1da:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <pausado>
 1de:	91 30       	cpi	r25, 0x01	; 1
 1e0:	29 f4       	brne	.+10     	; 0x1ec <debouncing_pc0+0x3e>
		pausado = 0;
 1e2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <pausado>
		flag_pc0 = 0;
 1e6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <flag_pc0>
 1ea:	08 95       	ret
	}
	else if ((pc0_pressionado ==0) && (flag_pc0 == 1) && (pausado == 0)){
 1ec:	81 11       	cpse	r24, r1
 1ee:	0d c0       	rjmp	.+26     	; 0x20a <debouncing_pc0+0x5c>
 1f0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <flag_pc0>
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	49 f4       	brne	.+18     	; 0x20a <debouncing_pc0+0x5c>
 1f8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pausado>
 1fc:	81 11       	cpse	r24, r1
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <debouncing_pc0+0x5c>
		pausado = 1;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <pausado>
		flag_pc0 = 0;
 206:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <flag_pc0>
 20a:	08 95       	ret

Disassembly of section .text.debouncing_pc1:

0000020c <debouncing_pc1>:
	}
}
void debouncing_pc1(){
	estado_atual_pc1 = (PINC & (1 << PINC1));
 20c:	86 b1       	in	r24, 0x06	; 6
 20e:	82 70       	andi	r24, 0x02	; 2
 210:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if((estado_atual_pc1 == estado_passado_pc1) && (pc1_pressionado ==1)){
 214:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <estado_passado_pc1>
 218:	89 13       	cpse	r24, r25
 21a:	06 c0       	rjmp	.+12     	; 0x228 <debouncing_pc1+0x1c>
 21c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <pc1_pressionado>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	11 f4       	brne	.+4      	; 0x228 <debouncing_pc1+0x1c>
		zerado = 1;
 224:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <zerado>
	}
	if((pc1_pressionado ==0) && (flag_pc1 == 1) && (zerado == 1)){
 228:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <pc1_pressionado>
 22c:	81 11       	cpse	r24, r1
 22e:	0d c0       	rjmp	.+26     	; 0x24a <debouncing_pc1+0x3e>
 230:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <flag_pc1>
 234:	91 30       	cpi	r25, 0x01	; 1
 236:	49 f4       	brne	.+18     	; 0x24a <debouncing_pc1+0x3e>
 238:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <zerado>
 23c:	91 30       	cpi	r25, 0x01	; 1
 23e:	29 f4       	brne	.+10     	; 0x24a <debouncing_pc1+0x3e>
		zerado = 0;
 240:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <zerado>
		flag_pc1 = 0;
 244:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <flag_pc1>
 248:	08 95       	ret
	}
	else if ((pc1_pressionado ==0) && (flag_pc1 == 1) && (zerado == 0)){
 24a:	81 11       	cpse	r24, r1
 24c:	0d c0       	rjmp	.+26     	; 0x268 <debouncing_pc1+0x5c>
 24e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <flag_pc1>
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	49 f4       	brne	.+18     	; 0x268 <debouncing_pc1+0x5c>
 256:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <zerado>
 25a:	81 11       	cpse	r24, r1
 25c:	05 c0       	rjmp	.+10     	; 0x268 <debouncing_pc1+0x5c>
		zerado = 1;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <zerado>
		flag_pc1 = 0;
 264:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <flag_pc1>
 268:	08 95       	ret

Disassembly of section .text.atualiza_display:

0000026a <atualiza_display>:
	}
}
void atualiza_display(){
	// Atualiza o display das dezenas
	PORTD = decodificador_7seg[dezena]; // Atualiza os pinos PD0-PD6 com o dígito da dezena
 26a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <dezena>
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	a0 e0       	ldi	r26, 0x00	; 0
 272:	8c 52       	subi	r24, 0x2C	; 44
 274:	9f 4f       	sbci	r25, 0xFF	; 255
 276:	af 4f       	sbci	r26, 0xFF	; 255
 278:	fc 01       	movw	r30, r24
 27a:	84 91       	lpm	r24, Z
 27c:	a7 fd       	sbrc	r26, 7
 27e:	80 81       	ld	r24, Z
 280:	8b b9       	out	0x0b, r24	; 11
	// Atualiza o display das unidades
	PORTD |= (decodificador_7seg[unidade] & 0b00000001) << PD7; // Atualiza o segmento A (PD7) com o dígito da unidade
 282:	2b b1       	in	r18, 0x0b	; 11
 284:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_end>
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	a0 e0       	ldi	r26, 0x00	; 0
 28c:	8c 52       	subi	r24, 0x2C	; 44
 28e:	9f 4f       	sbci	r25, 0xFF	; 255
 290:	af 4f       	sbci	r26, 0xFF	; 255
 292:	fc 01       	movw	r30, r24
 294:	94 91       	lpm	r25, Z
 296:	a7 fd       	sbrc	r26, 7
 298:	90 81       	ld	r25, Z
 29a:	30 e8       	ldi	r19, 0x80	; 128
 29c:	93 9f       	mul	r25, r19
 29e:	c0 01       	movw	r24, r0
 2a0:	11 24       	eor	r1, r1
 2a2:	82 2b       	or	r24, r18
 2a4:	8b b9       	out	0x0b, r24	; 11
	PORTB = (decodificador_7seg[unidade] & 0b01111110) >> 1; // Atualiza os pinos PB0-PB5 com os segmentos B-G da unidade
 2a6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_end>
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	a0 e0       	ldi	r26, 0x00	; 0
 2ae:	8c 52       	subi	r24, 0x2C	; 44
 2b0:	9f 4f       	sbci	r25, 0xFF	; 255
 2b2:	af 4f       	sbci	r26, 0xFF	; 255
 2b4:	fc 01       	movw	r30, r24
 2b6:	84 91       	lpm	r24, Z
 2b8:	a7 fd       	sbrc	r26, 7
 2ba:	80 81       	ld	r24, Z
 2bc:	8e 77       	andi	r24, 0x7E	; 126
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	95 95       	asr	r25
 2c2:	87 95       	ror	r24
 2c4:	85 b9       	out	0x05, r24	; 5
 2c6:	08 95       	ret

Disassembly of section .text.incrementa_contador:

00000320 <incrementa_contador>:
}
void incrementa_contador(){
	// Incrementa os valores de unidade e dezena
	unidade++; // Incrementa a unidade
 320:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_end>
 324:	8f 5f       	subi	r24, 0xFF	; 255
 326:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_end>
	if (unidade == 10) // Se a unidade atingir 10 ou pc1 pressionado, reinicia em 0 e incrementa a dezena
 32a:	8a 30       	cpi	r24, 0x0A	; 10
 32c:	59 f4       	brne	.+22     	; 0x344 <incrementa_contador+0x24>
	{
		unidade = 0;
 32e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_end>
		dezena++;
 332:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <dezena>
 336:	8f 5f       	subi	r24, 0xFF	; 255
 338:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <dezena>
		if (dezena == 10) // Se a dezena atingir 10 ou pc1 pressionado, reinicia em 0
 33c:	8a 30       	cpi	r24, 0x0A	; 10
 33e:	11 f4       	brne	.+4      	; 0x344 <incrementa_contador+0x24>
		{
			dezena = 0;
 340:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <dezena>
 344:	08 95       	ret

Disassembly of section .text.__vector_11:

000002f6 <__vector_11>:
			unidade = 0;
		}
	}
}
ISR(TIMER1_COMPA_vect){
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
 300:	8f 93       	push	r24
	contador_timer1++;
 302:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <contador_timer1>
 306:	8f 5f       	subi	r24, 0xFF	; 255
 308:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <contador_timer1>
	if (contador_timer1>=30){
 30c:	8e 31       	cpi	r24, 0x1E	; 30
 30e:	10 f0       	brcs	.+4      	; 0x314 <__vector_11+0x1e>
		contador_timer1=0;
 310:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <contador_timer1>
	}
}
 314:	8f 91       	pop	r24
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

Disassembly of section .text.__vector_14:

0000014a <__vector_14>:
ISR(TIMER0_COMPA_vect) {
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
	if (contador_timer0 < tempo_debounce) {
 16c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <contador_timer0>
 170:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <tempo_debounce>
 174:	89 17       	cp	r24, r25
 176:	20 f4       	brcc	.+8      	; 0x180 <__vector_14+0x36>
		contador_timer0++;
 178:	8f 5f       	subi	r24, 0xFF	; 255
 17a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <contador_timer0>
 17e:	06 c0       	rjmp	.+12     	; 0x18c <__vector_14+0x42>
	}
	else{
		contador_timer0 = 0;
 180:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <contador_timer0>
		debouncing_pc0();
 184:	0e 94 d7 00 	call	0x1ae	; 0x1ae <debouncing_pc0>
		debouncing_pc1();
 188:	0e 94 06 01 	call	0x20c	; 0x20c <debouncing_pc1>
	}
}
 18c:	ff 91       	pop	r31
 18e:	ef 91       	pop	r30
 190:	bf 91       	pop	r27
 192:	af 91       	pop	r26
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	7f 91       	pop	r23
 19a:	6f 91       	pop	r22
 19c:	5f 91       	pop	r21
 19e:	4f 91       	pop	r20
 1a0:	3f 91       	pop	r19
 1a2:	2f 91       	pop	r18
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

Disassembly of section .text.__vector_4:

000000de <__vector_4>:
ISR(PCINT1_vect) {
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	3f 93       	push	r19
  ec:	4f 93       	push	r20
  ee:	5f 93       	push	r21
  f0:	6f 93       	push	r22
  f2:	7f 93       	push	r23
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	af 93       	push	r26
  fa:	bf 93       	push	r27
  fc:	ef 93       	push	r30
  fe:	ff 93       	push	r31
	estado_passado_pc0 = (PINC & (1 << PINC0));
 100:	86 b1       	in	r24, 0x06	; 6
 102:	81 70       	andi	r24, 0x01	; 1
 104:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <estado_passado_pc0>
	pc0_pressionado = !(estado_passado_pc0);
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	81 11       	cpse	r24, r1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <pc0_pressionado>
	estado_passado_pc1 = (PINC & (1 << PINC1));
 112:	86 b1       	in	r24, 0x06	; 6
 114:	82 70       	andi	r24, 0x02	; 2
 116:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <estado_passado_pc1>
	pc1_pressionado = !(estado_passado_pc1);
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	81 11       	cpse	r24, r1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pc1_pressionado>
	inicia_timer0();
 124:	0e 94 cf 01 	call	0x39e	; 0x39e <inicia_timer0>
}
 128:	ff 91       	pop	r31
 12a:	ef 91       	pop	r30
 12c:	bf 91       	pop	r27
 12e:	af 91       	pop	r26
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	7f 91       	pop	r23
 136:	6f 91       	pop	r22
 138:	5f 91       	pop	r21
 13a:	4f 91       	pop	r20
 13c:	3f 91       	pop	r19
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

Disassembly of section .text.setup:

00000346 <setup>:
void setup(){
	DDRD = 0xFF; // Configura PD0-PD6 como saídas
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x3F; // Configura PB0-PB5 como saídas
 34a:	8f e3       	ldi	r24, 0x3F	; 63
 34c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x00; // Configura PC0:PC5 como entradas
 34e:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x03; //Configura PC0:PC1 como pull-up
 350:	83 e0       	ldi	r24, 0x03	; 3
 352:	88 b9       	out	0x08, r24	; 8
	PCICR = (1 << PCIE1); // Habilita interrupção de pin change no PORTC
 354:	92 e0       	ldi	r25, 0x02	; 2
 356:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK1 = (1 << PCINT8) | (1 << PCINT9); // Habilita interrupção nos pinos PC0 e PC1 (PCINT8 e PCINT9)
 35a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
	atualiza_display();
 35e:	0e 94 35 01 	call	0x26a	; 0x26a <atualiza_display>
	inicia_timer1();
 362:	0e 94 b5 01 	call	0x36a	; 0x36a <inicia_timer1>
	sei(); //Habilita interrupções globais
 366:	78 94       	sei
 368:	08 95       	ret

Disassembly of section .text.main:

000002c8 <main>:
}
int main(void)
{
	setup();
 2c8:	0e 94 a3 01 	call	0x346	; 0x346 <setup>
	while (1)
	{
		if (zerado == 1){
 2cc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <zerado>
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	21 f4       	brne	.+8      	; 0x2dc <main+0x14>
			unidade = 0;
 2d4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_end>
			dezena = 0;
 2d8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <dezena>
		}
		// Verifica se o contador do display não está pausado e se o contador do timer1 precisa ser reiniciado
		if ((pausado == 0) && (contador_timer1 == 0)) {
 2dc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pausado>
 2e0:	81 11       	cpse	r24, r1
 2e2:	f4 cf       	rjmp	.-24     	; 0x2cc <main+0x4>
 2e4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <contador_timer1>
 2e8:	81 11       	cpse	r24, r1
 2ea:	f0 cf       	rjmp	.-32     	; 0x2cc <main+0x4>
			atualiza_display();
 2ec:	0e 94 35 01 	call	0x26a	; 0x26a <atualiza_display>
			incrementa_contador();
 2f0:	0e 94 90 01 	call	0x320	; 0x320 <incrementa_contador>
 2f4:	eb cf       	rjmp	.-42     	; 0x2cc <main+0x4>

Disassembly of section .text.__dummy_fini:

000003b6 <_fini>:
 3b6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000003b8 <__funcs_on_exit>:
 3b8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000003ba <__simulator_exit>:
 3ba:	08 95       	ret

Disassembly of section .text.exit:

00000388 <exit>:
 388:	ec 01       	movw	r28, r24
 38a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__funcs_on_exit>
 38e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_fini>
 392:	ce 01       	movw	r24, r28
 394:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__simulator_exit>
 398:	ce 01       	movw	r24, r28
 39a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_Exit>

Disassembly of section .text._Exit:

000003b2 <_Exit>:
 3b2:	0e 94 68 00 	call	0xd0	; 0xd0 <_exit>
