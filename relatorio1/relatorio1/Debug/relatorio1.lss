
relatorio1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a8  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001d7  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000962  00000000  00000000  00000205  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000690  00000000  00000000  00000b67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000254  00000000  00000000  000011f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000144c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000074  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000126  00000126  0000019a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000086  0000008a  0000008a  000000fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .progmemx.data.decodificador_7seg 0000000a  00000080  00000080  000000f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 16 .text.__dummy_fini 00000002  0000012e  0000012e  000001a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  00000130  00000130  000001a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  00000132  00000132  000001a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  00000110  00000110  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  0000012a  0000012a  0000019e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  78:	0c 94 88 00 	jmp	0x110	; 0x110 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000008a <main>:
};

int main(void)
{
	int unidade = 0, dezena = 0;
	DDRD = 0xFF; // Configura PD0-PD6 como saídas
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x3F; // Configura PB0-PB5 como saídas
  8e:	8f e3       	ldi	r24, 0x3F	; 63
  90:	84 b9       	out	0x04, r24	; 4
	0b01101111  // 9
};

int main(void)
{
	int unidade = 0, dezena = 0;
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	30 e0       	ldi	r19, 0x00	; 0
	DDRD = 0xFF; // Configura PD0-PD6 como saídas
	DDRB = 0x3F; // Configura PB0-PB5 como saídas
	while (1)
	{
		// Atualiza o display das dezenas
		PORTD = decodificador_7seg[dezena]; // Atualiza os pinos PD0-PD6 com o dígito da dezena
  9a:	ca 01       	movw	r24, r20
  9c:	05 2e       	mov	r0, r21
  9e:	00 0c       	add	r0, r0
  a0:	aa 0b       	sbc	r26, r26
  a2:	80 58       	subi	r24, 0x80	; 128
  a4:	9f 4f       	sbci	r25, 0xFF	; 255
  a6:	af 4f       	sbci	r26, 0xFF	; 255
  a8:	fc 01       	movw	r30, r24
  aa:	84 91       	lpm	r24, Z
  ac:	a7 fd       	sbrc	r26, 7
  ae:	80 81       	ld	r24, Z
  b0:	8b b9       	out	0x0b, r24	; 11
		// Atualiza o display das unidades
		PORTD |= (decodificador_7seg[unidade] & 0b00000001) << PD7; // Atualiza o segmento A (PD7) com o dígito da unidade
  b2:	bb b1       	in	r27, 0x0b	; 11
  b4:	c9 01       	movw	r24, r18
  b6:	03 2e       	mov	r0, r19
  b8:	00 0c       	add	r0, r0
  ba:	aa 0b       	sbc	r26, r26
  bc:	80 58       	subi	r24, 0x80	; 128
  be:	9f 4f       	sbci	r25, 0xFF	; 255
  c0:	af 4f       	sbci	r26, 0xFF	; 255
  c2:	fc 01       	movw	r30, r24
  c4:	84 91       	lpm	r24, Z
  c6:	a7 fd       	sbrc	r26, 7
  c8:	80 81       	ld	r24, Z
  ca:	90 e8       	ldi	r25, 0x80	; 128
  cc:	89 9f       	mul	r24, r25
  ce:	b0 01       	movw	r22, r0
  d0:	11 24       	eor	r1, r1
  d2:	6b 2b       	or	r22, r27
  d4:	6b b9       	out	0x0b, r22	; 11
		PORTB = (decodificador_7seg[unidade] & 0b01111110) >> 1; // Atualiza os pinos PB0-PB5 com os segmentos B-G da unidade
  d6:	8e 77       	andi	r24, 0x7E	; 126
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	95 95       	asr	r25
  dc:	87 95       	ror	r24
  de:	85 b9       	out	0x05, r24	; 5
		// Incrementa os valores de unidade e dezena
		unidade++; // Incrementa a unidade
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
		if (unidade == 10) // Se a unidade atingir 10, reinicia em 0 e incrementa a dezena
  e4:	2a 30       	cpi	r18, 0x0A	; 10
  e6:	31 05       	cpc	r19, r1
  e8:	61 f4       	brne	.+24     	; 0x102 <main+0x78>
		{
			unidade = 0;
			dezena++;
  ea:	4f 5f       	subi	r20, 0xFF	; 255
  ec:	5f 4f       	sbci	r21, 0xFF	; 255
			if (dezena == 10) // Se a dezena atingir 10, reinicia em 0
  ee:	4a 30       	cpi	r20, 0x0A	; 10
  f0:	51 05       	cpc	r21, r1
  f2:	19 f0       	breq	.+6      	; 0xfa <main+0x70>
		PORTB = (decodificador_7seg[unidade] & 0b01111110) >> 1; // Atualiza os pinos PB0-PB5 com os segmentos B-G da unidade
		// Incrementa os valores de unidade e dezena
		unidade++; // Incrementa a unidade
		if (unidade == 10) // Se a unidade atingir 10, reinicia em 0 e incrementa a dezena
		{
			unidade = 0;
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	04 c0       	rjmp	.+8      	; 0x102 <main+0x78>
			dezena++;
			if (dezena == 10) // Se a dezena atingir 10, reinicia em 0
			{
				dezena = 0;
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	50 e0       	ldi	r21, 0x00	; 0
		PORTB = (decodificador_7seg[unidade] & 0b01111110) >> 1; // Atualiza os pinos PB0-PB5 com os segmentos B-G da unidade
		// Incrementa os valores de unidade e dezena
		unidade++; // Incrementa a unidade
		if (unidade == 10) // Se a unidade atingir 10, reinicia em 0 e incrementa a dezena
		{
			unidade = 0;
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	83 ec       	ldi	r24, 0xC3	; 195
 104:	99 e0       	ldi	r25, 0x09	; 9
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x7c>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x82>
 10c:	00 00       	nop
 10e:	c5 cf       	rjmp	.-118    	; 0x9a <main+0x10>

Disassembly of section .text.__dummy_fini:

0000012e <_fini>:
 12e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000130 <__funcs_on_exit>:
 130:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000132 <__simulator_exit>:
 132:	08 95       	ret

Disassembly of section .text.exit:

00000110 <exit>:
 110:	ec 01       	movw	r28, r24
 112:	0e 94 98 00 	call	0x130	; 0x130 <__funcs_on_exit>
 116:	0e 94 97 00 	call	0x12e	; 0x12e <_fini>
 11a:	ce 01       	movw	r24, r28
 11c:	0e 94 99 00 	call	0x132	; 0x132 <__simulator_exit>
 120:	ce 01       	movw	r24, r28
 122:	0e 94 95 00 	call	0x12a	; 0x12a <_Exit>

Disassembly of section .text._Exit:

0000012a <_Exit>:
 12a:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
