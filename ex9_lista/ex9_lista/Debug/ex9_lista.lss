
ex9_lista.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001a5  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a0  00000000  00000000  000001e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000635  00000000  00000000  00000a83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000234  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  000012ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000053  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001597  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000f4  000000f4  00000168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000048  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_14 00000016  000000c8  000000c8  0000013c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  000000fc  000000fc  00000170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  000000fe  000000fe  00000172  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  00000100  00000100  00000174  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  000000de  000000de  00000152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  000000f8  000000f8  0000016c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_14>
  3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  40:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  48:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  4c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  60:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000f4 <__bad_interrupt>:
  f4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000080 <main>:
		//Periodo_interrupção = 100ms
		//Periodo_clock = 1us
		//OCR0A = (Periodo_interrupção/Periodo_clock)*(1/prescaler) - 1
		//OCR0A <= (2^8)-1 = 255
		//OCR0A = (10^6/PRESCALER) - 1= 100ms
		OCR0A = 97;
  80:	81 e6       	ldi	r24, 0x61	; 97
  82:	87 bd       	out	0x27, r24	; 39
		//PRESCALER = 1024
		TCCR0B = (1 << TCCR0B);
  84:	25 b5       	in	r18, 0x25	; 37
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	02 c0       	rjmp	.+4      	; 0x90 <main+0x10>
  8c:	88 0f       	add	r24, r24
  8e:	99 1f       	adc	r25, r25
  90:	2a 95       	dec	r18
  92:	e2 f7       	brpl	.-8      	; 0x8c <main+0xc>
  94:	85 bd       	out	0x25, r24	; 37
		//TCCR0B = 0b00000101; // --> PRESCALER = 1024
		//TCCR0A = 0b00000010; (CTC MODE) (pagina 86);
		TCCR0A = (1 << WGM01);
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	84 bd       	out	0x24, r24	; 36
		//TIMSK0 = 0b00000010 // --> Output Compare Match A Interrupt Enable
		TIMSK0 = (1 << OCIE0A);
  9a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
		//SEI() --> habilita rotina de interrupção
		//Status Register: Global Interrupt Enable = 1
		DDRD = 0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8a b9       	out	0x0a, r24	; 10
		for (int i=0; i<100;i++){
  a2:	20 e0       	ldi	r18, 0x00	; 0
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	0b c0       	rjmp	.+22     	; 0xbe <main+0x3e>
			PORTD = (1 << PORTD);
  a8:	4b b1       	in	r20, 0x0b	; 11
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <main+0x34>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	4a 95       	dec	r20
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <main+0x30>
  b8:	8b b9       	out	0x0b, r24	; 11
		//TIMSK0 = 0b00000010 // --> Output Compare Match A Interrupt Enable
		TIMSK0 = (1 << OCIE0A);
		//SEI() --> habilita rotina de interrupção
		//Status Register: Global Interrupt Enable = 1
		DDRD = 0xFF;
		for (int i=0; i<100;i++){
  ba:	2f 5f       	subi	r18, 0xFF	; 255
  bc:	3f 4f       	sbci	r19, 0xFF	; 255
  be:	24 36       	cpi	r18, 0x64	; 100
  c0:	31 05       	cpc	r19, r1
  c2:	94 f3       	brlt	.-28     	; 0xa8 <main+0x28>
			PORTD = (1 << PORTD);
		}
		sei();
  c4:	78 94       	sei
		}
  c6:	dc cf       	rjmp	.-72     	; 0x80 <main>

Disassembly of section .text.__vector_14:

000000c8 <__vector_14>:
}
ISR(TIMER0_COMPA_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
	asm("nop");
  d2:	00 00       	nop
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

Disassembly of section .text.__dummy_fini:

000000fc <_fini>:
  fc:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000fe <__funcs_on_exit>:
  fe:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000100 <__simulator_exit>:
 100:	08 95       	ret

Disassembly of section .text.exit:

000000de <exit>:
  de:	ec 01       	movw	r28, r24
  e0:	0e 94 7f 00 	call	0xfe	; 0xfe <__funcs_on_exit>
  e4:	0e 94 7e 00 	call	0xfc	; 0xfc <_fini>
  e8:	ce 01       	movw	r24, r28
  ea:	0e 94 80 00 	call	0x100	; 0x100 <__simulator_exit>
  ee:	ce 01       	movw	r24, r28
  f0:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Exit>

Disassembly of section .text._Exit:

000000f8 <_Exit>:
  f8:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
