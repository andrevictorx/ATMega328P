
relatorio3_varredura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000004b0  00000564  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 000000b6  00000000  00000000  00000593  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000649  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000920  00000000  00000000  00000669  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064a  00000000  00000000  00000f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000286  00000000  00000000  000015d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000185c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000211  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ac  00000000  00000000  00001a91  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000049e  0000049e  00000552  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000176  000000c8  000000c8  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .bss.contador.1637 00000001  00800106  00800106  00000564  2**0
                  ALLOC
 16 .data.tempo   00000002  00800100  000004ac  00000560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 17 .data.tempoDefault 00000002  00800102  000004ae  00000562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .bss.estado   00000002  00800104  00800104  00000564  2**0
                  ALLOC
 19 .text         0000000e  0000044a  0000044a  000004fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text         000000ce  0000023e  0000023e  000002f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text         0000000a  0000048e  0000048e  00000542  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text         0000007a  0000030c  0000030c  000003c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text         00000048  00000386  00000386  0000043a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text         0000000c  00000482  00000482  00000536  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text         00000006  00000498  00000498  0000054c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text         0000000e  00000458  00000458  0000050c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text         0000000e  00000466  00000466  0000051a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text         00000022  00000412  00000412  000004c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text         00000044  000003ce  000003ce  00000482  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text         0000000e  00000474  00000474  00000528  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__dummy_fini 00000002  000004a6  000004a6  0000055a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__dummy_funcs_on_exit 00000002  000004a8  000004a8  0000055c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__dummy_simulator_exit 00000002  000004aa  000004aa  0000055e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.exit    00000016  00000434  00000434  000004e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text._Exit   00000004  000004a2  000004a2  00000556  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
   8:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
   c:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  10:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  14:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  18:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  1c:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  20:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  24:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  28:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  2c:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  30:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  34:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  38:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  3c:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  40:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  44:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  48:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  4c:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  50:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  54:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  58:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  5c:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  60:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
  64:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 04       	cpc	r0, r1
  6c:	00 04       	cpc	r0, r0
  6e:	ac 01       	movw	r20, r24
  70:	04 01       	movw	r0, r8
  72:	07 80       	ldd	r0, Z+7	; 0x07

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 64 00 	call	0xc8	; 0xc8 <_etext>
  c0:	0c 94 1a 02 	jmp	0x434	; 0x434 <exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

0000049e <__bad_interrupt>:
 49e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000c8 <main>:
int tempo = 17000;
int main(void)
{
  static unsigned char contador = 0;
  // PB0:PB5 como saída
  DDRB = (0x01 << PINB0) | (0x01 << PINB1) |
  c8:	8f e3       	ldi	r24, 0x3F	; 63
  ca:	84 b9       	out	0x04, r24	; 4
         (0x01 << PINB2) | (0x01 << PINB3) |
         (0x01 << PINB4) | (0x01 << PINB5);
  // PBD:PD5 como saída
  DDRD = (0x01 << PIND0) | (0x01 << PIND1) |
  cc:	8a b9       	out	0x0a, r24	; 10
         (0x01 << PIND2) | (0x01 << PIND3) |
         (0x01 << PIND4) | (0x01 << PIND5);
  
  DDRC = (0x01 << PINC0)| (0x01 << PINC1);
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	87 b9       	out	0x07, r24	; 7
  PORTC = (0x01 << PINC0) | (0x01 << PINC1);// PC0:PC1 com resistor de pull-up
  d2:	88 b9       	out	0x08, r24	; 8


  // Habilita as interrupções mascaráveis
  sei();
  d4:	78 94       	sei

  while (1)
  {
    if (contador == 7)
  d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <contador.1637>
  da:	87 30       	cpi	r24, 0x07	; 7
  dc:	29 f4       	brne	.+10     	; 0xe8 <main+0x20>
    { // Preencheu os displays -> zera tudo
      PORTB = 0;
  de:	15 b8       	out	0x05, r1	; 5
      PORTD = 0;
  e0:	1b b8       	out	0x0b, r1	; 11
      contador = 0;
  e2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <contador.1637>
  e6:	17 c0       	rjmp	.+46     	; 0x116 <main+0x4e>
    }
    else
    {
      if (estado == 0)
  e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <estado>
  ec:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <estado+0x1>
  f0:	89 2b       	or	r24, r25
  f2:	49 f4       	brne	.+18     	; 0x106 <main+0x3e>
      { // Port B horário e Port C antihorário
        PORTB = (PORTB << 1) + 1;
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	88 0f       	add	r24, r24
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	85 b9       	out	0x05, r24	; 5
        PORTD = (PORTD >> 1) + 0b00100000;
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	86 95       	lsr	r24
 100:	80 5e       	subi	r24, 0xE0	; 224
 102:	8b b9       	out	0x0b, r24	; 11
 104:	08 c0       	rjmp	.+16     	; 0x116 <main+0x4e>
      } else
      { // Port C horário e Port B antihorário
        PORTD = (PORTD << 1) + 1;
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	88 0f       	add	r24, r24
 10a:	8f 5f       	subi	r24, 0xFF	; 255
 10c:	8b b9       	out	0x0b, r24	; 11
        PORTB = (PORTB >> 1) + 0b00100000;
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	86 95       	lsr	r24
 112:	80 5e       	subi	r24, 0xE0	; 224
 114:	85 b9       	out	0x05, r24	; 5
      }
    }
    // atraso de 125ms
    //delay(100);
    for (double i = 0; i < tempo; i++) {}
 116:	c1 2c       	mov	r12, r1
 118:	d1 2c       	mov	r13, r1
 11a:	76 01       	movw	r14, r12
 11c:	0a c0       	rjmp	.+20     	; 0x132 <main+0x6a>
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	40 e8       	ldi	r20, 0x80	; 128
 124:	5f e3       	ldi	r21, 0x3F	; 63
 126:	c7 01       	movw	r24, r14
 128:	b6 01       	movw	r22, r12
 12a:	0e 94 26 02 	call	0x44c	; 0x44c <__addsf3>
 12e:	6b 01       	movw	r12, r22
 130:	7c 01       	movw	r14, r24
 132:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 136:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13a:	be 01       	movw	r22, r28
 13c:	0d 2e       	mov	r0, r29
 13e:	00 0c       	add	r0, r0
 140:	88 0b       	sbc	r24, r24
 142:	99 0b       	sbc	r25, r25
 144:	0e 94 88 01 	call	0x310	; 0x310 <__floatsisf>
 148:	9b 01       	movw	r18, r22
 14a:	ac 01       	movw	r20, r24
 14c:	c7 01       	movw	r24, r14
 14e:	b6 01       	movw	r22, r12
 150:	0e 94 47 02 	call	0x48e	; 0x48e <__cmpsf2>
 154:	88 23       	and	r24, r24
 156:	1c f3       	brlt	.-58     	; 0x11e <main+0x56>
    // incrementa o contador de leds acessos
    contador++;
 158:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <contador.1637>
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <contador.1637>
    while (((0x01 & PINC) | (0x02 & PINC)) == 0) {}
 162:	96 b1       	in	r25, 0x06	; 6
 164:	86 b1       	in	r24, 0x06	; 6
 166:	91 70       	andi	r25, 0x01	; 1
 168:	82 70       	andi	r24, 0x02	; 2
 16a:	89 2b       	or	r24, r25
 16c:	d1 f3       	breq	.-12     	; 0x162 <main+0x9a>
    if ((0x01 & PINC) == 0) {
 16e:	30 9b       	sbis	0x06, 0	; 6
 170:	0c c0       	rjmp	.+24     	; 0x18a <main+0xc2>
 172:	26 c0       	rjmp	.+76     	; 0x1c0 <main+0xf8>
      for (double i = 0; i < 13500; i++) {}
 174:	20 e0       	ldi	r18, 0x00	; 0
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	40 e8       	ldi	r20, 0x80	; 128
 17a:	5f e3       	ldi	r21, 0x3F	; 63
 17c:	c7 01       	movw	r24, r14
 17e:	b6 01       	movw	r22, r12
 180:	0e 94 26 02 	call	0x44c	; 0x44c <__addsf3>
 184:	6b 01       	movw	r12, r22
 186:	7c 01       	movw	r14, r24
 188:	03 c0       	rjmp	.+6      	; 0x190 <main+0xc8>
 18a:	c1 2c       	mov	r12, r1
 18c:	d1 2c       	mov	r13, r1
 18e:	76 01       	movw	r14, r12
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 ef       	ldi	r19, 0xF0	; 240
 194:	42 e5       	ldi	r20, 0x52	; 82
 196:	56 e4       	ldi	r21, 0x46	; 70
 198:	c7 01       	movw	r24, r14
 19a:	b6 01       	movw	r22, r12
 19c:	0e 94 47 02 	call	0x48e	; 0x48e <__cmpsf2>
 1a0:	88 23       	and	r24, r24
 1a2:	44 f3       	brlt	.-48     	; 0x174 <main+0xac>
      // Botão do PC0 pressionado?
      estado = !estado; // inverte o sentido dos displays
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <estado>
 1ac:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <estado+0x1>
 1b0:	23 2b       	or	r18, r19
 1b2:	11 f0       	breq	.+4      	; 0x1b8 <main+0xf0>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <estado+0x1>
 1bc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <estado>
    }
    if ((0x02 & PINC) == 0) {
 1c0:	31 99       	sbic	0x06, 1	; 6
 1c2:	89 cf       	rjmp	.-238    	; 0xd6 <main+0xe>
 1c4:	0b c0       	rjmp	.+22     	; 0x1dc <main+0x114>
      for (double i = 0; i < 13500; i++) {}
 1c6:	20 e0       	ldi	r18, 0x00	; 0
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	40 e8       	ldi	r20, 0x80	; 128
 1cc:	5f e3       	ldi	r21, 0x3F	; 63
 1ce:	c7 01       	movw	r24, r14
 1d0:	b6 01       	movw	r22, r12
 1d2:	0e 94 26 02 	call	0x44c	; 0x44c <__addsf3>
 1d6:	6b 01       	movw	r12, r22
 1d8:	7c 01       	movw	r14, r24
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <main+0x11a>
 1dc:	c1 2c       	mov	r12, r1
 1de:	d1 2c       	mov	r13, r1
 1e0:	76 01       	movw	r14, r12
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	30 ef       	ldi	r19, 0xF0	; 240
 1e6:	42 e5       	ldi	r20, 0x52	; 82
 1e8:	56 e4       	ldi	r21, 0x46	; 70
 1ea:	c7 01       	movw	r24, r14
 1ec:	b6 01       	movw	r22, r12
 1ee:	0e 94 47 02 	call	0x48e	; 0x48e <__cmpsf2>
 1f2:	88 23       	and	r24, r24
 1f4:	44 f3       	brlt	.-48     	; 0x1c6 <main+0xfe>
      tempo = tempo / 2;
 1f6:	ce 01       	movw	r24, r28
 1f8:	dd 23       	and	r29, r29
 1fa:	0c f4       	brge	.+2      	; 0x1fe <main+0x136>
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	95 95       	asr	r25
 200:	87 95       	ror	r24
 202:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 206:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
      if (tempo <= (tempoDefault / 16)) {
 20a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <tempoDefault>
 20e:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <tempoDefault+0x1>
 212:	9a 01       	movw	r18, r20
 214:	55 23       	and	r21, r21
 216:	14 f4       	brge	.+4      	; 0x21c <main+0x154>
 218:	21 5f       	subi	r18, 0xF1	; 241
 21a:	3f 4f       	sbci	r19, 0xFF	; 255
 21c:	35 95       	asr	r19
 21e:	27 95       	ror	r18
 220:	35 95       	asr	r19
 222:	27 95       	ror	r18
 224:	35 95       	asr	r19
 226:	27 95       	ror	r18
 228:	35 95       	asr	r19
 22a:	27 95       	ror	r18
 22c:	28 17       	cp	r18, r24
 22e:	39 07       	cpc	r19, r25
 230:	0c f4       	brge	.+2      	; 0x234 <main+0x16c>
 232:	51 cf       	rjmp	.-350    	; 0xd6 <main+0xe>
        tempo = tempoDefault;
 234:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 238:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__DATA_REGION_ORIGIN__>
 23c:	4c cf       	rjmp	.-360    	; 0xd6 <main+0xe>

Disassembly of section .text:

0000044a <__subsf3>:
 44a:	50 58       	subi	r21, 0x80	; 128

0000044c <__addsf3>:
 44c:	bb 27       	eor	r27, r27
 44e:	aa 27       	eor	r26, r26
 450:	0e 94 1f 01 	call	0x23e	; 0x23e <__addsf3x>
 454:	0c 94 09 02 	jmp	0x412	; 0x412 <__fp_round>

Disassembly of section .text:

0000023e <__addsf3x>:
 23e:	11 c0       	rjmp	.+34     	; 0x262 <__addsf3x+0x24>
 240:	0e 94 2c 02 	call	0x458	; 0x458 <__fp_pscA>
 244:	38 f0       	brcs	.+14     	; 0x254 <__addsf3x+0x16>
 246:	0e 94 33 02 	call	0x466	; 0x466 <__fp_pscB>
 24a:	20 f0       	brcs	.+8      	; 0x254 <__addsf3x+0x16>
 24c:	39 f4       	brne	.+14     	; 0x25c <__addsf3x+0x1e>
 24e:	9f 3f       	cpi	r25, 0xFF	; 255
 250:	19 f4       	brne	.+6      	; 0x258 <__addsf3x+0x1a>
 252:	26 f4       	brtc	.+8      	; 0x25c <__addsf3x+0x1e>
 254:	0c 94 4c 02 	jmp	0x498	; 0x498 <__fp_nan>
 258:	0e f4       	brtc	.+2      	; 0x25c <__addsf3x+0x1e>
 25a:	e0 95       	com	r30
 25c:	e7 fb       	bst	r30, 7
 25e:	0c 94 41 02 	jmp	0x482	; 0x482 <__fp_inf>
 262:	e9 2f       	mov	r30, r25
 264:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__fp_split3>
 268:	58 f3       	brcs	.-42     	; 0x240 <__addsf3x+0x2>
 26a:	ba 17       	cp	r27, r26
 26c:	62 07       	cpc	r22, r18
 26e:	73 07       	cpc	r23, r19
 270:	84 07       	cpc	r24, r20
 272:	95 07       	cpc	r25, r21
 274:	20 f0       	brcs	.+8      	; 0x27e <__addsf3x+0x40>
 276:	79 f4       	brne	.+30     	; 0x296 <__addsf3x+0x58>
 278:	a6 f5       	brtc	.+104    	; 0x2e2 <__addsf3x+0xa4>
 27a:	0c 94 3a 02 	jmp	0x474	; 0x474 <__fp_zero>
 27e:	0e f4       	brtc	.+2      	; 0x282 <__addsf3x+0x44>
 280:	e0 95       	com	r30
 282:	0b 2e       	mov	r0, r27
 284:	ba 2f       	mov	r27, r26
 286:	a0 2d       	mov	r26, r0
 288:	0b 01       	movw	r0, r22
 28a:	b9 01       	movw	r22, r18
 28c:	90 01       	movw	r18, r0
 28e:	0c 01       	movw	r0, r24
 290:	ca 01       	movw	r24, r20
 292:	a0 01       	movw	r20, r0
 294:	11 24       	eor	r1, r1
 296:	ff 27       	eor	r31, r31
 298:	59 1b       	sub	r21, r25
 29a:	99 f0       	breq	.+38     	; 0x2c2 <__addsf3x+0x84>
 29c:	59 3f       	cpi	r21, 0xF9	; 249
 29e:	50 f4       	brcc	.+20     	; 0x2b4 <__addsf3x+0x76>
 2a0:	50 3e       	cpi	r21, 0xE0	; 224
 2a2:	68 f1       	brcs	.+90     	; 0x2fe <__addsf3x+0xc0>
 2a4:	1a 16       	cp	r1, r26
 2a6:	f0 40       	sbci	r31, 0x00	; 0
 2a8:	a2 2f       	mov	r26, r18
 2aa:	23 2f       	mov	r18, r19
 2ac:	34 2f       	mov	r19, r20
 2ae:	44 27       	eor	r20, r20
 2b0:	58 5f       	subi	r21, 0xF8	; 248
 2b2:	f3 cf       	rjmp	.-26     	; 0x29a <__addsf3x+0x5c>
 2b4:	46 95       	lsr	r20
 2b6:	37 95       	ror	r19
 2b8:	27 95       	ror	r18
 2ba:	a7 95       	ror	r26
 2bc:	f0 40       	sbci	r31, 0x00	; 0
 2be:	53 95       	inc	r21
 2c0:	c9 f7       	brne	.-14     	; 0x2b4 <__addsf3x+0x76>
 2c2:	7e f4       	brtc	.+30     	; 0x2e2 <__addsf3x+0xa4>
 2c4:	1f 16       	cp	r1, r31
 2c6:	ba 0b       	sbc	r27, r26
 2c8:	62 0b       	sbc	r22, r18
 2ca:	73 0b       	sbc	r23, r19
 2cc:	84 0b       	sbc	r24, r20
 2ce:	ba f0       	brmi	.+46     	; 0x2fe <__addsf3x+0xc0>
 2d0:	91 50       	subi	r25, 0x01	; 1
 2d2:	a1 f0       	breq	.+40     	; 0x2fc <__addsf3x+0xbe>
 2d4:	ff 0f       	add	r31, r31
 2d6:	bb 1f       	adc	r27, r27
 2d8:	66 1f       	adc	r22, r22
 2da:	77 1f       	adc	r23, r23
 2dc:	88 1f       	adc	r24, r24
 2de:	c2 f7       	brpl	.-16     	; 0x2d0 <__addsf3x+0x92>
 2e0:	0e c0       	rjmp	.+28     	; 0x2fe <__addsf3x+0xc0>
 2e2:	ba 0f       	add	r27, r26
 2e4:	62 1f       	adc	r22, r18
 2e6:	73 1f       	adc	r23, r19
 2e8:	84 1f       	adc	r24, r20
 2ea:	48 f4       	brcc	.+18     	; 0x2fe <__addsf3x+0xc0>
 2ec:	87 95       	ror	r24
 2ee:	77 95       	ror	r23
 2f0:	67 95       	ror	r22
 2f2:	b7 95       	ror	r27
 2f4:	f7 95       	ror	r31
 2f6:	9e 3f       	cpi	r25, 0xFE	; 254
 2f8:	08 f0       	brcs	.+2      	; 0x2fc <__addsf3x+0xbe>
 2fa:	b0 cf       	rjmp	.-160    	; 0x25c <__addsf3x+0x1e>
 2fc:	93 95       	inc	r25
 2fe:	88 0f       	add	r24, r24
 300:	08 f0       	brcs	.+2      	; 0x304 <__addsf3x+0xc6>
 302:	99 27       	eor	r25, r25
 304:	ee 0f       	add	r30, r30
 306:	97 95       	ror	r25
 308:	87 95       	ror	r24
 30a:	08 95       	ret

Disassembly of section .text:

0000048e <__cmpsf2>:
 48e:	0e 94 c3 01 	call	0x386	; 0x386 <__fp_cmp>
 492:	08 f4       	brcc	.+2      	; 0x496 <__cmpsf2+0x8>
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	08 95       	ret

Disassembly of section .text:

0000030c <__floatunsisf>:
 30c:	e8 94       	clt
 30e:	09 c0       	rjmp	.+18     	; 0x322 <__floatsisf+0x12>

00000310 <__floatsisf>:
 310:	97 fb       	bst	r25, 7
 312:	3e f4       	brtc	.+14     	; 0x322 <__floatsisf+0x12>
 314:	90 95       	com	r25
 316:	80 95       	com	r24
 318:	70 95       	com	r23
 31a:	61 95       	neg	r22
 31c:	7f 4f       	sbci	r23, 0xFF	; 255
 31e:	8f 4f       	sbci	r24, 0xFF	; 255
 320:	9f 4f       	sbci	r25, 0xFF	; 255
 322:	99 23       	and	r25, r25
 324:	a9 f0       	breq	.+42     	; 0x350 <__floatsisf+0x40>
 326:	f9 2f       	mov	r31, r25
 328:	96 e9       	ldi	r25, 0x96	; 150
 32a:	bb 27       	eor	r27, r27
 32c:	93 95       	inc	r25
 32e:	f6 95       	lsr	r31
 330:	87 95       	ror	r24
 332:	77 95       	ror	r23
 334:	67 95       	ror	r22
 336:	b7 95       	ror	r27
 338:	f1 11       	cpse	r31, r1
 33a:	f8 cf       	rjmp	.-16     	; 0x32c <__floatsisf+0x1c>
 33c:	fa f4       	brpl	.+62     	; 0x37c <__floatsisf+0x6c>
 33e:	bb 0f       	add	r27, r27
 340:	11 f4       	brne	.+4      	; 0x346 <__floatsisf+0x36>
 342:	60 ff       	sbrs	r22, 0
 344:	1b c0       	rjmp	.+54     	; 0x37c <__floatsisf+0x6c>
 346:	6f 5f       	subi	r22, 0xFF	; 255
 348:	7f 4f       	sbci	r23, 0xFF	; 255
 34a:	8f 4f       	sbci	r24, 0xFF	; 255
 34c:	9f 4f       	sbci	r25, 0xFF	; 255
 34e:	16 c0       	rjmp	.+44     	; 0x37c <__floatsisf+0x6c>
 350:	88 23       	and	r24, r24
 352:	11 f0       	breq	.+4      	; 0x358 <__floatsisf+0x48>
 354:	96 e9       	ldi	r25, 0x96	; 150
 356:	11 c0       	rjmp	.+34     	; 0x37a <__floatsisf+0x6a>
 358:	77 23       	and	r23, r23
 35a:	21 f0       	breq	.+8      	; 0x364 <__floatsisf+0x54>
 35c:	9e e8       	ldi	r25, 0x8E	; 142
 35e:	87 2f       	mov	r24, r23
 360:	76 2f       	mov	r23, r22
 362:	05 c0       	rjmp	.+10     	; 0x36e <__floatsisf+0x5e>
 364:	66 23       	and	r22, r22
 366:	71 f0       	breq	.+28     	; 0x384 <__floatsisf+0x74>
 368:	96 e8       	ldi	r25, 0x86	; 134
 36a:	86 2f       	mov	r24, r22
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	2a f0       	brmi	.+10     	; 0x37c <__floatsisf+0x6c>
 372:	9a 95       	dec	r25
 374:	66 0f       	add	r22, r22
 376:	77 1f       	adc	r23, r23
 378:	88 1f       	adc	r24, r24
 37a:	da f7       	brpl	.-10     	; 0x372 <__floatsisf+0x62>
 37c:	88 0f       	add	r24, r24
 37e:	96 95       	lsr	r25
 380:	87 95       	ror	r24
 382:	97 f9       	bld	r25, 7
 384:	08 95       	ret

Disassembly of section .text:

00000386 <__fp_cmp>:
 386:	99 0f       	add	r25, r25
 388:	00 08       	sbc	r0, r0
 38a:	55 0f       	add	r21, r21
 38c:	aa 0b       	sbc	r26, r26
 38e:	e0 e8       	ldi	r30, 0x80	; 128
 390:	fe ef       	ldi	r31, 0xFE	; 254
 392:	16 16       	cp	r1, r22
 394:	17 06       	cpc	r1, r23
 396:	e8 07       	cpc	r30, r24
 398:	f9 07       	cpc	r31, r25
 39a:	c0 f0       	brcs	.+48     	; 0x3cc <__fp_cmp+0x46>
 39c:	12 16       	cp	r1, r18
 39e:	13 06       	cpc	r1, r19
 3a0:	e4 07       	cpc	r30, r20
 3a2:	f5 07       	cpc	r31, r21
 3a4:	98 f0       	brcs	.+38     	; 0x3cc <__fp_cmp+0x46>
 3a6:	62 1b       	sub	r22, r18
 3a8:	73 0b       	sbc	r23, r19
 3aa:	84 0b       	sbc	r24, r20
 3ac:	95 0b       	sbc	r25, r21
 3ae:	39 f4       	brne	.+14     	; 0x3be <__fp_cmp+0x38>
 3b0:	0a 26       	eor	r0, r26
 3b2:	61 f0       	breq	.+24     	; 0x3cc <__fp_cmp+0x46>
 3b4:	23 2b       	or	r18, r19
 3b6:	24 2b       	or	r18, r20
 3b8:	25 2b       	or	r18, r21
 3ba:	21 f4       	brne	.+8      	; 0x3c4 <__fp_cmp+0x3e>
 3bc:	08 95       	ret
 3be:	0a 26       	eor	r0, r26
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <__fp_cmp+0x3e>
 3c2:	a1 40       	sbci	r26, 0x01	; 1
 3c4:	a6 95       	lsr	r26
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	81 1d       	adc	r24, r1
 3ca:	81 1d       	adc	r24, r1
 3cc:	08 95       	ret

Disassembly of section .text:

00000482 <__fp_inf>:
 482:	97 f9       	bld	r25, 7
 484:	9f 67       	ori	r25, 0x7F	; 127
 486:	80 e8       	ldi	r24, 0x80	; 128
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	08 95       	ret

Disassembly of section .text:

00000498 <__fp_nan>:
 498:	9f ef       	ldi	r25, 0xFF	; 255
 49a:	80 ec       	ldi	r24, 0xC0	; 192
 49c:	08 95       	ret

Disassembly of section .text:

00000458 <__fp_pscA>:
 458:	00 24       	eor	r0, r0
 45a:	0a 94       	dec	r0
 45c:	16 16       	cp	r1, r22
 45e:	17 06       	cpc	r1, r23
 460:	18 06       	cpc	r1, r24
 462:	09 06       	cpc	r0, r25
 464:	08 95       	ret

Disassembly of section .text:

00000466 <__fp_pscB>:
 466:	00 24       	eor	r0, r0
 468:	0a 94       	dec	r0
 46a:	12 16       	cp	r1, r18
 46c:	13 06       	cpc	r1, r19
 46e:	14 06       	cpc	r1, r20
 470:	05 06       	cpc	r0, r21
 472:	08 95       	ret

Disassembly of section .text:

00000412 <__fp_round>:
 412:	09 2e       	mov	r0, r25
 414:	03 94       	inc	r0
 416:	00 0c       	add	r0, r0
 418:	11 f4       	brne	.+4      	; 0x41e <__fp_round+0xc>
 41a:	88 23       	and	r24, r24
 41c:	52 f0       	brmi	.+20     	; 0x432 <__fp_round+0x20>
 41e:	bb 0f       	add	r27, r27
 420:	40 f4       	brcc	.+16     	; 0x432 <__fp_round+0x20>
 422:	bf 2b       	or	r27, r31
 424:	11 f4       	brne	.+4      	; 0x42a <__fp_round+0x18>
 426:	60 ff       	sbrs	r22, 0
 428:	04 c0       	rjmp	.+8      	; 0x432 <__fp_round+0x20>
 42a:	6f 5f       	subi	r22, 0xFF	; 255
 42c:	7f 4f       	sbci	r23, 0xFF	; 255
 42e:	8f 4f       	sbci	r24, 0xFF	; 255
 430:	9f 4f       	sbci	r25, 0xFF	; 255
 432:	08 95       	ret

Disassembly of section .text:

000003ce <__fp_split3>:
 3ce:	57 fd       	sbrc	r21, 7
 3d0:	90 58       	subi	r25, 0x80	; 128
 3d2:	44 0f       	add	r20, r20
 3d4:	55 1f       	adc	r21, r21
 3d6:	59 f0       	breq	.+22     	; 0x3ee <__fp_splitA+0x10>
 3d8:	5f 3f       	cpi	r21, 0xFF	; 255
 3da:	71 f0       	breq	.+28     	; 0x3f8 <__fp_splitA+0x1a>
 3dc:	47 95       	ror	r20

000003de <__fp_splitA>:
 3de:	88 0f       	add	r24, r24
 3e0:	97 fb       	bst	r25, 7
 3e2:	99 1f       	adc	r25, r25
 3e4:	61 f0       	breq	.+24     	; 0x3fe <__fp_splitA+0x20>
 3e6:	9f 3f       	cpi	r25, 0xFF	; 255
 3e8:	79 f0       	breq	.+30     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3ea:	87 95       	ror	r24
 3ec:	08 95       	ret
 3ee:	12 16       	cp	r1, r18
 3f0:	13 06       	cpc	r1, r19
 3f2:	14 06       	cpc	r1, r20
 3f4:	55 1f       	adc	r21, r21
 3f6:	f2 cf       	rjmp	.-28     	; 0x3dc <__fp_split3+0xe>
 3f8:	46 95       	lsr	r20
 3fa:	f1 df       	rcall	.-30     	; 0x3de <__fp_splitA>
 3fc:	08 c0       	rjmp	.+16     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3fe:	16 16       	cp	r1, r22
 400:	17 06       	cpc	r1, r23
 402:	18 06       	cpc	r1, r24
 404:	99 1f       	adc	r25, r25
 406:	f1 cf       	rjmp	.-30     	; 0x3ea <__fp_splitA+0xc>
 408:	86 95       	lsr	r24
 40a:	71 05       	cpc	r23, r1
 40c:	61 05       	cpc	r22, r1
 40e:	08 94       	sec
 410:	08 95       	ret

Disassembly of section .text:

00000474 <__fp_zero>:
 474:	e8 94       	clt

00000476 <__fp_szero>:
 476:	bb 27       	eor	r27, r27
 478:	66 27       	eor	r22, r22
 47a:	77 27       	eor	r23, r23
 47c:	cb 01       	movw	r24, r22
 47e:	97 f9       	bld	r25, 7
 480:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000004a6 <_fini>:
 4a6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000004a8 <__funcs_on_exit>:
 4a8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000004aa <__simulator_exit>:
 4aa:	08 95       	ret

Disassembly of section .text.exit:

00000434 <exit>:
 434:	ec 01       	movw	r28, r24
 436:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__funcs_on_exit>
 43a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <_fini>
 43e:	ce 01       	movw	r24, r28
 440:	0e 94 55 02 	call	0x4aa	; 0x4aa <__simulator_exit>
 444:	ce 01       	movw	r24, r28
 446:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_Exit>

Disassembly of section .text._Exit:

000004a2 <_Exit>:
 4a2:	0e 94 62 00 	call	0xc4	; 0xc4 <_exit>
