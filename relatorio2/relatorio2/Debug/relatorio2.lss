
relatorio2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000004bc  00000570  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 000000b6  00000000  00000000  0000059f  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000655  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000918  00000000  00000000  0000067d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000660  00000000  00000000  00000f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000294  00000000  00000000  000015f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  0000188c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000211  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000161  00000000  00000000  00001b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000004ac  000004ac  00000560  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    000000a2  00000278  00000278  0000032c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_4 000000e2  000000c8  000000c8  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss.contador.1637 00000001  00800104  00800104  00000570  2**0
                  ALLOC
 17 .data.tempo   00000002  00800100  000004ba  0000056e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .bss.estado   00000002  00800102  00800102  00000570  2**0
                  ALLOC
 19 .text         0000000e  00000458  00000458  0000050c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text         000000ce  000001aa  000001aa  0000025e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text         0000000a  0000049c  0000049c  00000550  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text         0000007a  0000031a  0000031a  000003ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text         00000048  00000394  00000394  00000448  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text         0000000c  00000490  00000490  00000544  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text         00000006  000004a6  000004a6  0000055a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text         0000000e  00000466  00000466  0000051a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text         0000000e  00000474  00000474  00000528  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text         00000022  00000420  00000420  000004d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text         00000044  000003dc  000003dc  00000490  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text         0000000e  00000482  00000482  00000536  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__dummy_fini 00000002  000004b4  000004b4  00000568  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__dummy_funcs_on_exit 00000002  000004b6  000004b6  0000056a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__dummy_simulator_exit 00000002  000004b8  000004b8  0000056c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.exit    00000016  00000442  00000442  000004f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text._Exit   00000004  000004b0  000004b0  00000564  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
   8:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
   c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_etext>
  14:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  18:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  1c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  20:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  24:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  28:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  2c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  30:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  34:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  38:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  3c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  40:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  44:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  48:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  4c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  50:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  54:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  58:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  5c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  60:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
  64:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 02       	muls	r16, r17
  6c:	00 04       	cpc	r0, r0
  6e:	ba 01       	movw	r22, r20
  70:	02 01       	movw	r0, r4
  72:	05 80       	ldd	r0, Z+5	; 0x05

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 3c 01 	call	0x278	; 0x278 <main>
  c0:	0c 94 21 02 	jmp	0x442	; 0x442 <exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

000004ac <__bad_interrupt>:
 4ac:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000278 <main>:

int main(void)
{
  static unsigned char contador = 0;
  // PB0:PB5 como saída
  DDRB = (0x01 << PINB0) | (0x01 << PINB1) |
 278:	8f e3       	ldi	r24, 0x3F	; 63
 27a:	84 b9       	out	0x04, r24	; 4
         (0x01 << PINB2) | (0x01 << PINB3) |
         (0x01 << PINB4) | (0x01 << PINB5);
  // PBD:PD5 como saída
  DDRD = (0x01 << PIND0) | (0x01 << PIND1) |
 27c:	8a b9       	out	0x0a, r24	; 10
         (0x01 << PIND2) | (0x01 << PIND3) |
         (0x01 << PIND4) | (0x01 << PIND5);
  // PC0:PC1 com resistor de pull-up
  PORTC = (0x01 << PINC0) | (0x01 << PINC1);
 27e:	83 e0       	ldi	r24, 0x03	; 3
 280:	88 b9       	out	0x08, r24	; 8
  // Interrupção de pin-change do port C
  PCICR = 0x01 << PCIE1;
 282:	92 e0       	ldi	r25, 0x02	; 2
 284:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
  // Interrupção do PC0:PC1
  PCMSK1 = (0x01 << PINC0) | (0x01 << PINC1);
 288:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>

  // Habilita as interrupções mascaráveis
  sei();
 28c:	78 94       	sei

  while (1)
  {
    if (contador == 7)
 28e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <contador.1637>
 292:	87 30       	cpi	r24, 0x07	; 7
 294:	29 f4       	brne	.+10     	; 0x2a0 <main+0x28>
    { // Preencheu os displays -> zera tudo
      PORTB = 0;
 296:	15 b8       	out	0x05, r1	; 5
      PORTD = 0;
 298:	1b b8       	out	0x0b, r1	; 11
      contador = 0;
 29a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <contador.1637>
 29e:	17 c0       	rjmp	.+46     	; 0x2ce <main+0x56>
    }
    else
    {
      if (estado == 0)
 2a0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <estado>
 2a4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <estado+0x1>
 2a8:	89 2b       	or	r24, r25
 2aa:	49 f4       	brne	.+18     	; 0x2be <main+0x46>
      { // Port B horário e Port C antihorário
        PORTB = (PORTB << 1) + 1;
 2ac:	85 b1       	in	r24, 0x05	; 5
 2ae:	88 0f       	add	r24, r24
 2b0:	8f 5f       	subi	r24, 0xFF	; 255
 2b2:	85 b9       	out	0x05, r24	; 5
        PORTD = (PORTD >> 1) + 0b00100000;
 2b4:	8b b1       	in	r24, 0x0b	; 11
 2b6:	86 95       	lsr	r24
 2b8:	80 5e       	subi	r24, 0xE0	; 224
 2ba:	8b b9       	out	0x0b, r24	; 11
 2bc:	08 c0       	rjmp	.+16     	; 0x2ce <main+0x56>
      } else
      { // Port C horário e Port B antihorário
        PORTD = (PORTD << 1) + 1;
 2be:	8b b1       	in	r24, 0x0b	; 11
 2c0:	88 0f       	add	r24, r24
 2c2:	8f 5f       	subi	r24, 0xFF	; 255
 2c4:	8b b9       	out	0x0b, r24	; 11
        PORTB = (PORTB >> 1) + 0b00100000;
 2c6:	85 b1       	in	r24, 0x05	; 5
 2c8:	86 95       	lsr	r24
 2ca:	80 5e       	subi	r24, 0xE0	; 224
 2cc:	85 b9       	out	0x05, r24	; 5
      }
    }
    // atraso de 125ms
    //delay(100);
    for (double i = 0; i < tempo; i++) {}
 2ce:	c1 2c       	mov	r12, r1
 2d0:	d1 2c       	mov	r13, r1
 2d2:	76 01       	movw	r14, r12
 2d4:	0a c0       	rjmp	.+20     	; 0x2ea <main+0x72>
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	40 e8       	ldi	r20, 0x80	; 128
 2dc:	5f e3       	ldi	r21, 0x3F	; 63
 2de:	c7 01       	movw	r24, r14
 2e0:	b6 01       	movw	r22, r12
 2e2:	0e 94 2d 02 	call	0x45a	; 0x45a <__addsf3>
 2e6:	6b 01       	movw	r12, r22
 2e8:	7c 01       	movw	r14, r24
 2ea:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ee:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2f2:	07 2e       	mov	r0, r23
 2f4:	00 0c       	add	r0, r0
 2f6:	88 0b       	sbc	r24, r24
 2f8:	99 0b       	sbc	r25, r25
 2fa:	0e 94 8f 01 	call	0x31e	; 0x31e <__floatsisf>
 2fe:	9b 01       	movw	r18, r22
 300:	ac 01       	movw	r20, r24
 302:	c7 01       	movw	r24, r14
 304:	b6 01       	movw	r22, r12
 306:	0e 94 4e 02 	call	0x49c	; 0x49c <__cmpsf2>
 30a:	88 23       	and	r24, r24
 30c:	24 f3       	brlt	.-56     	; 0x2d6 <main+0x5e>
    // incrementa o contador de leds acessos
    contador++;
 30e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <contador.1637>
 312:	8f 5f       	subi	r24, 0xFF	; 255
 314:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <contador.1637>
  }
 318:	ba cf       	rjmp	.-140    	; 0x28e <main+0x16>

Disassembly of section .text.__vector_4:

000000c8 <__vector_4>:
}

ISR(PCINT1_vect){ // Rotina de tratamento de interrupções de pin-change do PORT C
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	cf 92       	push	r12
  d4:	df 92       	push	r13
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	2f 93       	push	r18
  dc:	3f 93       	push	r19
  de:	4f 93       	push	r20
  e0:	5f 93       	push	r21
  e2:	6f 93       	push	r22
  e4:	7f 93       	push	r23
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
  while (((0x01 & PINC)|(0x02 & PINC)) == 0) {}
  f2:	96 b1       	in	r25, 0x06	; 6
  f4:	86 b1       	in	r24, 0x06	; 6
  f6:	91 70       	andi	r25, 0x01	; 1
  f8:	82 70       	andi	r24, 0x02	; 2
  fa:	89 2b       	or	r24, r25
  fc:	d1 f3       	breq	.-12     	; 0xf2 <__vector_4+0x2a>
  if ((0x01 & PINC) == 0) {
  fe:	30 9b       	sbis	0x06, 0	; 6
 100:	0c c0       	rjmp	.+24     	; 0x11a <__vector_4+0x52>
 102:	26 c0       	rjmp	.+76     	; 0x150 <__vector_4+0x88>
    for (double i = 0; i < 12000; i++) {}
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	40 e8       	ldi	r20, 0x80	; 128
 10a:	5f e3       	ldi	r21, 0x3F	; 63
 10c:	c7 01       	movw	r24, r14
 10e:	b6 01       	movw	r22, r12
 110:	0e 94 2d 02 	call	0x45a	; 0x45a <__addsf3>
 114:	6b 01       	movw	r12, r22
 116:	7c 01       	movw	r14, r24
 118:	03 c0       	rjmp	.+6      	; 0x120 <__vector_4+0x58>
 11a:	c1 2c       	mov	r12, r1
 11c:	d1 2c       	mov	r13, r1
 11e:	76 01       	movw	r14, r12
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e8       	ldi	r19, 0x80	; 128
 124:	4b e3       	ldi	r20, 0x3B	; 59
 126:	56 e4       	ldi	r21, 0x46	; 70
 128:	c7 01       	movw	r24, r14
 12a:	b6 01       	movw	r22, r12
 12c:	0e 94 4e 02 	call	0x49c	; 0x49c <__cmpsf2>
 130:	88 23       	and	r24, r24
 132:	44 f3       	brlt	.-48     	; 0x104 <__vector_4+0x3c>
    // Botão do PC0 pressionado?
    estado = !estado; // inverte o sentido dos displays
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <estado>
 13c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <estado+0x1>
 140:	23 2b       	or	r18, r19
 142:	11 f0       	breq	.+4      	; 0x148 <__vector_4+0x80>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <estado+0x1>
 14c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <estado>
  }
  if ((0x02 & PINC) == 0) {
 150:	31 99       	sbic	0x06, 1	; 6
 152:	16 c0       	rjmp	.+44     	; 0x180 <__vector_4+0xb8>
      tempo = tempo / 2;
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 158:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 15c:	99 23       	and	r25, r25
 15e:	0c f4       	brge	.+2      	; 0x162 <__vector_4+0x9a>
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	95 95       	asr	r25
 164:	87 95       	ror	r24
 166:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    if (tempo <= (tempoDefault / 16)) {
 16e:	87 32       	cpi	r24, 0x27	; 39
 170:	94 40       	sbci	r25, 0x04	; 4
 172:	34 f4       	brge	.+12     	; 0x180 <__vector_4+0xb8>
      tempo = tempoDefault;
 174:	88 e6       	ldi	r24, 0x68	; 104
 176:	92 e4       	ldi	r25, 0x42	; 66
 178:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    }
  }
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	ff 90       	pop	r15
 19a:	ef 90       	pop	r14
 19c:	df 90       	pop	r13
 19e:	cf 90       	pop	r12
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

Disassembly of section .text:

00000458 <__subsf3>:
 458:	50 58       	subi	r21, 0x80	; 128

0000045a <__addsf3>:
 45a:	bb 27       	eor	r27, r27
 45c:	aa 27       	eor	r26, r26
 45e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__addsf3x>
 462:	0c 94 10 02 	jmp	0x420	; 0x420 <__fp_round>

Disassembly of section .text:

000001aa <__addsf3x>:
 1aa:	11 c0       	rjmp	.+34     	; 0x1ce <__addsf3x+0x24>
 1ac:	0e 94 33 02 	call	0x466	; 0x466 <__fp_pscA>
 1b0:	38 f0       	brcs	.+14     	; 0x1c0 <__addsf3x+0x16>
 1b2:	0e 94 3a 02 	call	0x474	; 0x474 <__fp_pscB>
 1b6:	20 f0       	brcs	.+8      	; 0x1c0 <__addsf3x+0x16>
 1b8:	39 f4       	brne	.+14     	; 0x1c8 <__addsf3x+0x1e>
 1ba:	9f 3f       	cpi	r25, 0xFF	; 255
 1bc:	19 f4       	brne	.+6      	; 0x1c4 <__addsf3x+0x1a>
 1be:	26 f4       	brtc	.+8      	; 0x1c8 <__addsf3x+0x1e>
 1c0:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_nan>
 1c4:	0e f4       	brtc	.+2      	; 0x1c8 <__addsf3x+0x1e>
 1c6:	e0 95       	com	r30
 1c8:	e7 fb       	bst	r30, 7
 1ca:	0c 94 48 02 	jmp	0x490	; 0x490 <__fp_inf>
 1ce:	e9 2f       	mov	r30, r25
 1d0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__fp_split3>
 1d4:	58 f3       	brcs	.-42     	; 0x1ac <__addsf3x+0x2>
 1d6:	ba 17       	cp	r27, r26
 1d8:	62 07       	cpc	r22, r18
 1da:	73 07       	cpc	r23, r19
 1dc:	84 07       	cpc	r24, r20
 1de:	95 07       	cpc	r25, r21
 1e0:	20 f0       	brcs	.+8      	; 0x1ea <__addsf3x+0x40>
 1e2:	79 f4       	brne	.+30     	; 0x202 <__addsf3x+0x58>
 1e4:	a6 f5       	brtc	.+104    	; 0x24e <__addsf3x+0xa4>
 1e6:	0c 94 41 02 	jmp	0x482	; 0x482 <__fp_zero>
 1ea:	0e f4       	brtc	.+2      	; 0x1ee <__addsf3x+0x44>
 1ec:	e0 95       	com	r30
 1ee:	0b 2e       	mov	r0, r27
 1f0:	ba 2f       	mov	r27, r26
 1f2:	a0 2d       	mov	r26, r0
 1f4:	0b 01       	movw	r0, r22
 1f6:	b9 01       	movw	r22, r18
 1f8:	90 01       	movw	r18, r0
 1fa:	0c 01       	movw	r0, r24
 1fc:	ca 01       	movw	r24, r20
 1fe:	a0 01       	movw	r20, r0
 200:	11 24       	eor	r1, r1
 202:	ff 27       	eor	r31, r31
 204:	59 1b       	sub	r21, r25
 206:	99 f0       	breq	.+38     	; 0x22e <__addsf3x+0x84>
 208:	59 3f       	cpi	r21, 0xF9	; 249
 20a:	50 f4       	brcc	.+20     	; 0x220 <__addsf3x+0x76>
 20c:	50 3e       	cpi	r21, 0xE0	; 224
 20e:	68 f1       	brcs	.+90     	; 0x26a <__addsf3x+0xc0>
 210:	1a 16       	cp	r1, r26
 212:	f0 40       	sbci	r31, 0x00	; 0
 214:	a2 2f       	mov	r26, r18
 216:	23 2f       	mov	r18, r19
 218:	34 2f       	mov	r19, r20
 21a:	44 27       	eor	r20, r20
 21c:	58 5f       	subi	r21, 0xF8	; 248
 21e:	f3 cf       	rjmp	.-26     	; 0x206 <__addsf3x+0x5c>
 220:	46 95       	lsr	r20
 222:	37 95       	ror	r19
 224:	27 95       	ror	r18
 226:	a7 95       	ror	r26
 228:	f0 40       	sbci	r31, 0x00	; 0
 22a:	53 95       	inc	r21
 22c:	c9 f7       	brne	.-14     	; 0x220 <__addsf3x+0x76>
 22e:	7e f4       	brtc	.+30     	; 0x24e <__addsf3x+0xa4>
 230:	1f 16       	cp	r1, r31
 232:	ba 0b       	sbc	r27, r26
 234:	62 0b       	sbc	r22, r18
 236:	73 0b       	sbc	r23, r19
 238:	84 0b       	sbc	r24, r20
 23a:	ba f0       	brmi	.+46     	; 0x26a <__addsf3x+0xc0>
 23c:	91 50       	subi	r25, 0x01	; 1
 23e:	a1 f0       	breq	.+40     	; 0x268 <__addsf3x+0xbe>
 240:	ff 0f       	add	r31, r31
 242:	bb 1f       	adc	r27, r27
 244:	66 1f       	adc	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	88 1f       	adc	r24, r24
 24a:	c2 f7       	brpl	.-16     	; 0x23c <__addsf3x+0x92>
 24c:	0e c0       	rjmp	.+28     	; 0x26a <__addsf3x+0xc0>
 24e:	ba 0f       	add	r27, r26
 250:	62 1f       	adc	r22, r18
 252:	73 1f       	adc	r23, r19
 254:	84 1f       	adc	r24, r20
 256:	48 f4       	brcc	.+18     	; 0x26a <__addsf3x+0xc0>
 258:	87 95       	ror	r24
 25a:	77 95       	ror	r23
 25c:	67 95       	ror	r22
 25e:	b7 95       	ror	r27
 260:	f7 95       	ror	r31
 262:	9e 3f       	cpi	r25, 0xFE	; 254
 264:	08 f0       	brcs	.+2      	; 0x268 <__addsf3x+0xbe>
 266:	b0 cf       	rjmp	.-160    	; 0x1c8 <__addsf3x+0x1e>
 268:	93 95       	inc	r25
 26a:	88 0f       	add	r24, r24
 26c:	08 f0       	brcs	.+2      	; 0x270 <__addsf3x+0xc6>
 26e:	99 27       	eor	r25, r25
 270:	ee 0f       	add	r30, r30
 272:	97 95       	ror	r25
 274:	87 95       	ror	r24
 276:	08 95       	ret

Disassembly of section .text:

0000049c <__cmpsf2>:
 49c:	0e 94 ca 01 	call	0x394	; 0x394 <__fp_cmp>
 4a0:	08 f4       	brcc	.+2      	; 0x4a4 <__cmpsf2+0x8>
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	08 95       	ret

Disassembly of section .text:

0000031a <__floatunsisf>:
 31a:	e8 94       	clt
 31c:	09 c0       	rjmp	.+18     	; 0x330 <__floatsisf+0x12>

0000031e <__floatsisf>:
 31e:	97 fb       	bst	r25, 7
 320:	3e f4       	brtc	.+14     	; 0x330 <__floatsisf+0x12>
 322:	90 95       	com	r25
 324:	80 95       	com	r24
 326:	70 95       	com	r23
 328:	61 95       	neg	r22
 32a:	7f 4f       	sbci	r23, 0xFF	; 255
 32c:	8f 4f       	sbci	r24, 0xFF	; 255
 32e:	9f 4f       	sbci	r25, 0xFF	; 255
 330:	99 23       	and	r25, r25
 332:	a9 f0       	breq	.+42     	; 0x35e <__floatsisf+0x40>
 334:	f9 2f       	mov	r31, r25
 336:	96 e9       	ldi	r25, 0x96	; 150
 338:	bb 27       	eor	r27, r27
 33a:	93 95       	inc	r25
 33c:	f6 95       	lsr	r31
 33e:	87 95       	ror	r24
 340:	77 95       	ror	r23
 342:	67 95       	ror	r22
 344:	b7 95       	ror	r27
 346:	f1 11       	cpse	r31, r1
 348:	f8 cf       	rjmp	.-16     	; 0x33a <__floatsisf+0x1c>
 34a:	fa f4       	brpl	.+62     	; 0x38a <__floatsisf+0x6c>
 34c:	bb 0f       	add	r27, r27
 34e:	11 f4       	brne	.+4      	; 0x354 <__floatsisf+0x36>
 350:	60 ff       	sbrs	r22, 0
 352:	1b c0       	rjmp	.+54     	; 0x38a <__floatsisf+0x6c>
 354:	6f 5f       	subi	r22, 0xFF	; 255
 356:	7f 4f       	sbci	r23, 0xFF	; 255
 358:	8f 4f       	sbci	r24, 0xFF	; 255
 35a:	9f 4f       	sbci	r25, 0xFF	; 255
 35c:	16 c0       	rjmp	.+44     	; 0x38a <__floatsisf+0x6c>
 35e:	88 23       	and	r24, r24
 360:	11 f0       	breq	.+4      	; 0x366 <__floatsisf+0x48>
 362:	96 e9       	ldi	r25, 0x96	; 150
 364:	11 c0       	rjmp	.+34     	; 0x388 <__floatsisf+0x6a>
 366:	77 23       	and	r23, r23
 368:	21 f0       	breq	.+8      	; 0x372 <__floatsisf+0x54>
 36a:	9e e8       	ldi	r25, 0x8E	; 142
 36c:	87 2f       	mov	r24, r23
 36e:	76 2f       	mov	r23, r22
 370:	05 c0       	rjmp	.+10     	; 0x37c <__floatsisf+0x5e>
 372:	66 23       	and	r22, r22
 374:	71 f0       	breq	.+28     	; 0x392 <__floatsisf+0x74>
 376:	96 e8       	ldi	r25, 0x86	; 134
 378:	86 2f       	mov	r24, r22
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	2a f0       	brmi	.+10     	; 0x38a <__floatsisf+0x6c>
 380:	9a 95       	dec	r25
 382:	66 0f       	add	r22, r22
 384:	77 1f       	adc	r23, r23
 386:	88 1f       	adc	r24, r24
 388:	da f7       	brpl	.-10     	; 0x380 <__floatsisf+0x62>
 38a:	88 0f       	add	r24, r24
 38c:	96 95       	lsr	r25
 38e:	87 95       	ror	r24
 390:	97 f9       	bld	r25, 7
 392:	08 95       	ret

Disassembly of section .text:

00000394 <__fp_cmp>:
 394:	99 0f       	add	r25, r25
 396:	00 08       	sbc	r0, r0
 398:	55 0f       	add	r21, r21
 39a:	aa 0b       	sbc	r26, r26
 39c:	e0 e8       	ldi	r30, 0x80	; 128
 39e:	fe ef       	ldi	r31, 0xFE	; 254
 3a0:	16 16       	cp	r1, r22
 3a2:	17 06       	cpc	r1, r23
 3a4:	e8 07       	cpc	r30, r24
 3a6:	f9 07       	cpc	r31, r25
 3a8:	c0 f0       	brcs	.+48     	; 0x3da <__fp_cmp+0x46>
 3aa:	12 16       	cp	r1, r18
 3ac:	13 06       	cpc	r1, r19
 3ae:	e4 07       	cpc	r30, r20
 3b0:	f5 07       	cpc	r31, r21
 3b2:	98 f0       	brcs	.+38     	; 0x3da <__fp_cmp+0x46>
 3b4:	62 1b       	sub	r22, r18
 3b6:	73 0b       	sbc	r23, r19
 3b8:	84 0b       	sbc	r24, r20
 3ba:	95 0b       	sbc	r25, r21
 3bc:	39 f4       	brne	.+14     	; 0x3cc <__fp_cmp+0x38>
 3be:	0a 26       	eor	r0, r26
 3c0:	61 f0       	breq	.+24     	; 0x3da <__fp_cmp+0x46>
 3c2:	23 2b       	or	r18, r19
 3c4:	24 2b       	or	r18, r20
 3c6:	25 2b       	or	r18, r21
 3c8:	21 f4       	brne	.+8      	; 0x3d2 <__fp_cmp+0x3e>
 3ca:	08 95       	ret
 3cc:	0a 26       	eor	r0, r26
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <__fp_cmp+0x3e>
 3d0:	a1 40       	sbci	r26, 0x01	; 1
 3d2:	a6 95       	lsr	r26
 3d4:	8f ef       	ldi	r24, 0xFF	; 255
 3d6:	81 1d       	adc	r24, r1
 3d8:	81 1d       	adc	r24, r1
 3da:	08 95       	ret

Disassembly of section .text:

00000490 <__fp_inf>:
 490:	97 f9       	bld	r25, 7
 492:	9f 67       	ori	r25, 0x7F	; 127
 494:	80 e8       	ldi	r24, 0x80	; 128
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	08 95       	ret

Disassembly of section .text:

000004a6 <__fp_nan>:
 4a6:	9f ef       	ldi	r25, 0xFF	; 255
 4a8:	80 ec       	ldi	r24, 0xC0	; 192
 4aa:	08 95       	ret

Disassembly of section .text:

00000466 <__fp_pscA>:
 466:	00 24       	eor	r0, r0
 468:	0a 94       	dec	r0
 46a:	16 16       	cp	r1, r22
 46c:	17 06       	cpc	r1, r23
 46e:	18 06       	cpc	r1, r24
 470:	09 06       	cpc	r0, r25
 472:	08 95       	ret

Disassembly of section .text:

00000474 <__fp_pscB>:
 474:	00 24       	eor	r0, r0
 476:	0a 94       	dec	r0
 478:	12 16       	cp	r1, r18
 47a:	13 06       	cpc	r1, r19
 47c:	14 06       	cpc	r1, r20
 47e:	05 06       	cpc	r0, r21
 480:	08 95       	ret

Disassembly of section .text:

00000420 <__fp_round>:
 420:	09 2e       	mov	r0, r25
 422:	03 94       	inc	r0
 424:	00 0c       	add	r0, r0
 426:	11 f4       	brne	.+4      	; 0x42c <__fp_round+0xc>
 428:	88 23       	and	r24, r24
 42a:	52 f0       	brmi	.+20     	; 0x440 <__fp_round+0x20>
 42c:	bb 0f       	add	r27, r27
 42e:	40 f4       	brcc	.+16     	; 0x440 <__fp_round+0x20>
 430:	bf 2b       	or	r27, r31
 432:	11 f4       	brne	.+4      	; 0x438 <__fp_round+0x18>
 434:	60 ff       	sbrs	r22, 0
 436:	04 c0       	rjmp	.+8      	; 0x440 <__fp_round+0x20>
 438:	6f 5f       	subi	r22, 0xFF	; 255
 43a:	7f 4f       	sbci	r23, 0xFF	; 255
 43c:	8f 4f       	sbci	r24, 0xFF	; 255
 43e:	9f 4f       	sbci	r25, 0xFF	; 255
 440:	08 95       	ret

Disassembly of section .text:

000003dc <__fp_split3>:
 3dc:	57 fd       	sbrc	r21, 7
 3de:	90 58       	subi	r25, 0x80	; 128
 3e0:	44 0f       	add	r20, r20
 3e2:	55 1f       	adc	r21, r21
 3e4:	59 f0       	breq	.+22     	; 0x3fc <__fp_splitA+0x10>
 3e6:	5f 3f       	cpi	r21, 0xFF	; 255
 3e8:	71 f0       	breq	.+28     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3ea:	47 95       	ror	r20

000003ec <__fp_splitA>:
 3ec:	88 0f       	add	r24, r24
 3ee:	97 fb       	bst	r25, 7
 3f0:	99 1f       	adc	r25, r25
 3f2:	61 f0       	breq	.+24     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3f4:	9f 3f       	cpi	r25, 0xFF	; 255
 3f6:	79 f0       	breq	.+30     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3f8:	87 95       	ror	r24
 3fa:	08 95       	ret
 3fc:	12 16       	cp	r1, r18
 3fe:	13 06       	cpc	r1, r19
 400:	14 06       	cpc	r1, r20
 402:	55 1f       	adc	r21, r21
 404:	f2 cf       	rjmp	.-28     	; 0x3ea <__fp_split3+0xe>
 406:	46 95       	lsr	r20
 408:	f1 df       	rcall	.-30     	; 0x3ec <__fp_splitA>
 40a:	08 c0       	rjmp	.+16     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 40c:	16 16       	cp	r1, r22
 40e:	17 06       	cpc	r1, r23
 410:	18 06       	cpc	r1, r24
 412:	99 1f       	adc	r25, r25
 414:	f1 cf       	rjmp	.-30     	; 0x3f8 <__fp_splitA+0xc>
 416:	86 95       	lsr	r24
 418:	71 05       	cpc	r23, r1
 41a:	61 05       	cpc	r22, r1
 41c:	08 94       	sec
 41e:	08 95       	ret

Disassembly of section .text:

00000482 <__fp_zero>:
 482:	e8 94       	clt

00000484 <__fp_szero>:
 484:	bb 27       	eor	r27, r27
 486:	66 27       	eor	r22, r22
 488:	77 27       	eor	r23, r23
 48a:	cb 01       	movw	r24, r22
 48c:	97 f9       	bld	r25, 7
 48e:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000004b4 <_fini>:
 4b4:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000004b6 <__funcs_on_exit>:
 4b6:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000004b8 <__simulator_exit>:
 4b8:	08 95       	ret

Disassembly of section .text.exit:

00000442 <exit>:
 442:	ec 01       	movw	r28, r24
 444:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__funcs_on_exit>
 448:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_fini>
 44c:	ce 01       	movw	r24, r28
 44e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__simulator_exit>
 452:	ce 01       	movw	r24, r28
 454:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Exit>

Disassembly of section .text._Exit:

000004b0 <_Exit>:
 4b0:	0e 94 62 00 	call	0xc4	; 0xc4 <_exit>
