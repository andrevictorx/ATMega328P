
teste_relatorio4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000050e  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000050e  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000050e  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  0000053d  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000054b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b72  00000000  00000000  000005ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000640  00000000  00000000  0000111d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000445  00000000  00000000  0000175d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00001ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000261  00000000  00000000  00001f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002189  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  0000040a  0000040a  000004fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.reinicia_timer1 0000001e  000003c4  000003c4  000004b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.reinicia_timer0 00000012  000003f8  000003f8  000004ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.debouncing_pc0 0000005e  0000026a  0000026a  0000035e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.debouncing_pc1 0000005e  000002c8  000002c8  000003bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.atualiza_display 000000bc  000000de  000000de  000001d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__vector_11 0000005a  00000326  00000326  0000041a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_4 0000006c  0000019a  0000019a  0000028e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__vector_14 00000064  00000206  00000206  000002fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.main    00000044  00000380  00000380  00000474  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.unidade  00000001  00800106  00800106  0000050e  2**0
                  ALLOC
 25 .bss.dezena   00000001  00800107  00800107  0000050e  2**0
                  ALLOC
 26 .bss.contador_timer1 00000001  00800108  00800108  0000050e  2**0
                  ALLOC
 27 .bss.contador_timer0 00000001  00800109  00800109  0000050e  2**0
                  ALLOC
 28 .data.tempo_debounce 00000001  0080010a  00000418  0000050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 29 .bss.flag_pc1 00000001  0080010b  0080010b  0000050e  2**0
                  ALLOC
 30 .bss.flag_pc0 00000001  0080010c  0080010c  0000050e  2**0
                  ALLOC
 31 .bss.zerado   00000001  0080010d  0080010d  0000050e  2**0
                  ALLOC
 32 .data.pausado 00000001  0080010e  00000419  0000050d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 33 .progmemx.data.decodificador_7seg 0000000a  000000d4  000000d4  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 34 .text.__dummy_fini 00000002  00000412  00000412  00000506  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__dummy_funcs_on_exit 00000002  00000414  00000414  00000508  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__dummy_simulator_exit 00000002  00000416  00000416  0000050a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.exit    00000016  000003e2  000003e2  000004d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text._Exit   00000004  0000040e  0000040e  00000502  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
   4:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
   8:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
   c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_4>
  14:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  18:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  1c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  20:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  24:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  28:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  2c:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_11>
  30:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  34:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  38:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_14>
  3c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  40:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  44:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  48:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  4c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  50:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  54:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  58:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  5c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  60:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  64:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 0a       	sbc	r0, r17
  6c:	80 01       	movw	r16, r0
  6e:	0a 01       	movw	r0, r20
  70:	0b 00       	.word	0x000b	; ????
  72:	04 18       	sub	r0, r4
  74:	01 0b       	sbc	r16, r17
  76:	01 0e       	add	r0, r17
  78:	80 01       	movw	r16, r0
  7a:	0e 01       	movw	r0, r28
  7c:	0f 00       	.word	0x000f	; ????
  7e:	04 19       	sub	r16, r4

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	d8 e0       	ldi	r29, 0x08	; 8
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
  8c:	e8 e6       	ldi	r30, 0x68	; 104
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	17 c0       	rjmp	.+46     	; 0xc2 <__do_clear_bss+0x8>
  94:	b5 91       	lpm	r27, Z+
  96:	a5 91       	lpm	r26, Z+
  98:	35 91       	lpm	r19, Z+
  9a:	25 91       	lpm	r18, Z+
  9c:	05 91       	lpm	r16, Z+
  9e:	07 fd       	sbrc	r16, 7
  a0:	0c c0       	rjmp	.+24     	; 0xba <__do_clear_bss>
  a2:	95 91       	lpm	r25, Z+
  a4:	85 91       	lpm	r24, Z+
  a6:	ef 01       	movw	r28, r30
  a8:	f9 2f       	mov	r31, r25
  aa:	e8 2f       	mov	r30, r24
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0x20>
  b6:	fe 01       	movw	r30, r28
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <__do_clear_bss+0x8>

000000ba <__do_clear_bss>:
  ba:	1d 92       	st	X+, r1
  bc:	a2 17       	cp	r26, r18
  be:	b3 07       	cpc	r27, r19
  c0:	e1 f7       	brne	.-8      	; 0xba <__do_clear_bss>
  c2:	e0 38       	cpi	r30, 0x80	; 128
  c4:	f4 07       	cpc	r31, r20
  c6:	31 f7       	brne	.-52     	; 0x94 <__do_copy_data+0x8>
  c8:	0e 94 c0 01 	call	0x380	; 0x380 <main>
  cc:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <exit>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>

Disassembly of section .text:

0000040a <__bad_interrupt>:
 40a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.reinicia_timer1:

000003c4 <reinicia_timer1>:
unsigned char dezena = 0;
unsigned char unidade = 0;

void reinicia_timer1(){
	//REINICIA TIMER1 SEMPRE QUE ATUALIZA DISPLAY
	TCCR1A = 0b00000010; //CTC Mode
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0b00000101; //PRESCALER = 1024
 3ca:	95 e0       	ldi	r25, 0x05	; 5
 3cc:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 0xFF; //97*(1us)*1024 = 99,328ms
 3d0:	2f ef       	ldi	r18, 0xFF	; 255
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3d8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = 0b00000010; //Habilita interrupção na comparação com OCR1A
 3dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 3e0:	08 95       	ret

Disassembly of section .text.reinicia_timer0:

000003f8 <reinicia_timer0>:
}
void reinicia_timer0(){
	//TIMER0
	TCCR0A = 0b00000010; //CTC Mode
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000001; //PRESCALER = 8
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249; //250*(1us)*8 = 2ms
 400:	99 ef       	ldi	r25, 0xF9	; 249
 402:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b00000010; //Habilita interrupção na comparação com OCR0A
 404:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 408:	08 95       	ret

Disassembly of section .text.debouncing_pc0:

0000026a <debouncing_pc0>:
}
void debouncing_pc0(){
	estado_atual_pc0 = (PINC & (1 << PINC0));
 26a:	86 b1       	in	r24, 0x06	; 6
 26c:	81 70       	andi	r24, 0x01	; 1
 26e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <estado_atual_pc0>
	if((estado_atual_pc0 == estado_passado_pc0) && (pc0_pressionado ==1)){
 272:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <estado_passado_pc0>
 276:	89 13       	cpse	r24, r25
 278:	06 c0       	rjmp	.+12     	; 0x286 <debouncing_pc0+0x1c>
 27a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <pc0_pressionado>
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	11 f4       	brne	.+4      	; 0x286 <debouncing_pc0+0x1c>
		flag_pc0 = 1;
 282:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <flag_pc0>
	}
	if((pc0_pressionado ==0) && (flag_pc0 == 1) && (pausado == 1)){
 286:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <pc0_pressionado>
 28a:	81 11       	cpse	r24, r1
 28c:	0d c0       	rjmp	.+26     	; 0x2a8 <debouncing_pc0+0x3e>
 28e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <flag_pc0>
 292:	91 30       	cpi	r25, 0x01	; 1
 294:	49 f4       	brne	.+18     	; 0x2a8 <debouncing_pc0+0x3e>
 296:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <pausado>
 29a:	91 30       	cpi	r25, 0x01	; 1
 29c:	29 f4       	brne	.+10     	; 0x2a8 <debouncing_pc0+0x3e>
		pausado = 0;
 29e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <pausado>
		flag_pc0 = 0;
 2a2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <flag_pc0>
 2a6:	08 95       	ret
	}
	else if ((pc0_pressionado ==0) && (flag_pc0 == 1) && (pausado == 0)){
 2a8:	81 11       	cpse	r24, r1
 2aa:	0d c0       	rjmp	.+26     	; 0x2c6 <debouncing_pc0+0x5c>
 2ac:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <flag_pc0>
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	49 f4       	brne	.+18     	; 0x2c6 <debouncing_pc0+0x5c>
 2b4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pausado>
 2b8:	81 11       	cpse	r24, r1
 2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <debouncing_pc0+0x5c>
		pausado = 1;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <pausado>
		flag_pc0 = 0;
 2c2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <flag_pc0>
 2c6:	08 95       	ret

Disassembly of section .text.debouncing_pc1:

000002c8 <debouncing_pc1>:
	}
}

void debouncing_pc1(){
	estado_atual_pc1 = (PINC & (1 << PINC1));
 2c8:	86 b1       	in	r24, 0x06	; 6
 2ca:	82 70       	andi	r24, 0x02	; 2
 2cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if((estado_atual_pc1 == estado_passado_pc1) && (pc1_pressionado ==1)){
 2d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <estado_passado_pc1>
 2d4:	89 13       	cpse	r24, r25
 2d6:	06 c0       	rjmp	.+12     	; 0x2e4 <debouncing_pc1+0x1c>
 2d8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <pc1_pressionado>
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	11 f4       	brne	.+4      	; 0x2e4 <debouncing_pc1+0x1c>
		zerado = 1;
 2e0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <zerado>
	}
	if((pc1_pressionado ==0) && (flag_pc1 == 1) && (zerado == 1)){
 2e4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <pc1_pressionado>
 2e8:	81 11       	cpse	r24, r1
 2ea:	0d c0       	rjmp	.+26     	; 0x306 <debouncing_pc1+0x3e>
 2ec:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <flag_pc1>
 2f0:	91 30       	cpi	r25, 0x01	; 1
 2f2:	49 f4       	brne	.+18     	; 0x306 <debouncing_pc1+0x3e>
 2f4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <zerado>
 2f8:	91 30       	cpi	r25, 0x01	; 1
 2fa:	29 f4       	brne	.+10     	; 0x306 <debouncing_pc1+0x3e>
		zerado = 0;
 2fc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <zerado>
		flag_pc1 = 0;
 300:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <flag_pc1>
 304:	08 95       	ret
	}
	else if ((pc1_pressionado ==0) && (flag_pc1 == 1) && (zerado == 0)){
 306:	81 11       	cpse	r24, r1
 308:	0d c0       	rjmp	.+26     	; 0x324 <debouncing_pc1+0x5c>
 30a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <flag_pc1>
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	49 f4       	brne	.+18     	; 0x324 <debouncing_pc1+0x5c>
 312:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <zerado>
 316:	81 11       	cpse	r24, r1
 318:	05 c0       	rjmp	.+10     	; 0x324 <debouncing_pc1+0x5c>
		zerado = 1;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <zerado>
		flag_pc1 = 0;
 320:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <flag_pc1>
 324:	08 95       	ret

Disassembly of section .text.atualiza_display:

000000de <atualiza_display>:
	}
}

void atualiza_display(){
	// Atualiza o display das dezenas
	PORTD = decodificador_7seg[dezena]; // Atualiza os pinos PD0-PD6 com o dígito da dezena
  de:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <dezena>
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	a0 e0       	ldi	r26, 0x00	; 0
  e6:	8c 52       	subi	r24, 0x2C	; 44
  e8:	9f 4f       	sbci	r25, 0xFF	; 255
  ea:	af 4f       	sbci	r26, 0xFF	; 255
  ec:	fc 01       	movw	r30, r24
  ee:	84 91       	lpm	r24, Z
  f0:	a7 fd       	sbrc	r26, 7
  f2:	80 81       	ld	r24, Z
  f4:	8b b9       	out	0x0b, r24	; 11
	// Atualiza o display das unidades
	PORTD |= (decodificador_7seg[unidade % 10] & 0b00000001) << PD7; // Atualiza o segmento A (PD7) com o dígito da unidade
  f6:	5b b1       	in	r21, 0x0b	; 11
  f8:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <_end>
  fc:	9d ec       	ldi	r25, 0xCD	; 205
  fe:	29 9f       	mul	r18, r25
 100:	81 2d       	mov	r24, r1
 102:	11 24       	eor	r1, r1
 104:	86 95       	lsr	r24
 106:	86 95       	lsr	r24
 108:	86 95       	lsr	r24
 10a:	88 0f       	add	r24, r24
 10c:	38 2f       	mov	r19, r24
 10e:	33 0f       	add	r19, r19
 110:	33 0f       	add	r19, r19
 112:	83 0f       	add	r24, r19
 114:	28 1b       	sub	r18, r24
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	40 e0       	ldi	r20, 0x00	; 0
 11a:	2c 52       	subi	r18, 0x2C	; 44
 11c:	3f 4f       	sbci	r19, 0xFF	; 255
 11e:	4f 4f       	sbci	r20, 0xFF	; 255
 120:	f9 01       	movw	r30, r18
 122:	84 91       	lpm	r24, Z
 124:	47 fd       	sbrc	r20, 7
 126:	80 81       	ld	r24, Z
 128:	40 e8       	ldi	r20, 0x80	; 128
 12a:	84 9f       	mul	r24, r20
 12c:	90 01       	movw	r18, r0
 12e:	11 24       	eor	r1, r1
 130:	25 2b       	or	r18, r21
 132:	2b b9       	out	0x0b, r18	; 11
	PORTB = (decodificador_7seg[unidade % 10] & 0b01111110) >> 1; // Atualiza os pinos PB0-PB5 com os segmentos B-G da unidade
 134:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_end>
 138:	89 9f       	mul	r24, r25
 13a:	91 2d       	mov	r25, r1
 13c:	11 24       	eor	r1, r1
 13e:	96 95       	lsr	r25
 140:	96 95       	lsr	r25
 142:	96 95       	lsr	r25
 144:	99 0f       	add	r25, r25
 146:	29 2f       	mov	r18, r25
 148:	22 0f       	add	r18, r18
 14a:	22 0f       	add	r18, r18
 14c:	92 0f       	add	r25, r18
 14e:	89 1b       	sub	r24, r25
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	a0 e0       	ldi	r26, 0x00	; 0
 154:	8c 52       	subi	r24, 0x2C	; 44
 156:	9f 4f       	sbci	r25, 0xFF	; 255
 158:	af 4f       	sbci	r26, 0xFF	; 255
 15a:	fc 01       	movw	r30, r24
 15c:	84 91       	lpm	r24, Z
 15e:	a7 fd       	sbrc	r26, 7
 160:	80 81       	ld	r24, Z
 162:	8e 77       	andi	r24, 0x7E	; 126
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	95 95       	asr	r25
 168:	87 95       	ror	r24
 16a:	85 b9       	out	0x05, r24	; 5
	
	// Incrementa os valores de unidade e dezena
	if (pausado == 0) {
 16c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pausado>
 170:	81 11       	cpse	r24, r1
 172:	12 c0       	rjmp	.+36     	; 0x198 <atualiza_display+0xba>
		unidade++; // Incrementa a unidade
 174:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_end>
 178:	8f 5f       	subi	r24, 0xFF	; 255
 17a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_end>
		if (unidade == 10) // Se a unidade atingir 10 ou pc1 pressionado, reinicia em 0 e incrementa a dezena
 17e:	8a 30       	cpi	r24, 0x0A	; 10
 180:	59 f4       	brne	.+22     	; 0x198 <atualiza_display+0xba>
		{
			unidade = 0;
 182:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_end>
			dezena++;
 186:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <dezena>
 18a:	8f 5f       	subi	r24, 0xFF	; 255
 18c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <dezena>
			if (dezena == 10) // Se a dezena atingir 10 ou pc1 pressionado, reinicia em 0
 190:	8a 30       	cpi	r24, 0x0A	; 10
 192:	11 f4       	brne	.+4      	; 0x198 <atualiza_display+0xba>
			{
				dezena = 0;
 194:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <dezena>
 198:	08 95       	ret

Disassembly of section .text.__vector_11:

00000326 <__vector_11>:
			}
		}
	}
		
}
ISR(TIMER1_COMPA_vect){
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	2f 93       	push	r18
 332:	3f 93       	push	r19
 334:	4f 93       	push	r20
 336:	5f 93       	push	r21
 338:	6f 93       	push	r22
 33a:	7f 93       	push	r23
 33c:	8f 93       	push	r24
 33e:	9f 93       	push	r25
 340:	af 93       	push	r26
 342:	bf 93       	push	r27
 344:	ef 93       	push	r30
 346:	ff 93       	push	r31
	contador_timer1 = contador_timer1 + 1;
 348:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <contador_timer1>
 34c:	8f 5f       	subi	r24, 0xFF	; 255
 34e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <contador_timer1>
	if (contador_timer1>10){
 352:	8b 30       	cpi	r24, 0x0B	; 11
 354:	20 f0       	brcs	.+8      	; 0x35e <__vector_11+0x38>
		contador_timer1=0;
 356:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <contador_timer1>
		atualiza_display();
 35a:	0e 94 6f 00 	call	0xde	; 0xde <atualiza_display>
	}
}
 35e:	ff 91       	pop	r31
 360:	ef 91       	pop	r30
 362:	bf 91       	pop	r27
 364:	af 91       	pop	r26
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	7f 91       	pop	r23
 36c:	6f 91       	pop	r22
 36e:	5f 91       	pop	r21
 370:	4f 91       	pop	r20
 372:	3f 91       	pop	r19
 374:	2f 91       	pop	r18
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

Disassembly of section .text.__vector_4:

0000019a <__vector_4>:
ISR(PCINT1_vect) {
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	2f 93       	push	r18
 1a6:	3f 93       	push	r19
 1a8:	4f 93       	push	r20
 1aa:	5f 93       	push	r21
 1ac:	6f 93       	push	r22
 1ae:	7f 93       	push	r23
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
 1b4:	af 93       	push	r26
 1b6:	bf 93       	push	r27
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
	estado_passado_pc0 = (PINC & (1 << PINC0));
 1bc:	86 b1       	in	r24, 0x06	; 6
 1be:	81 70       	andi	r24, 0x01	; 1
 1c0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <estado_passado_pc0>
	pc0_pressionado = !(estado_passado_pc0);
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	81 11       	cpse	r24, r1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <pc0_pressionado>
	estado_passado_pc1 = (PINC & (1 << PINC1));
 1ce:	86 b1       	in	r24, 0x06	; 6
 1d0:	82 70       	andi	r24, 0x02	; 2
 1d2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <estado_passado_pc1>
	pc1_pressionado = !(estado_passado_pc1);
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	81 11       	cpse	r24, r1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pc1_pressionado>
	reinicia_timer0();
 1e0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <reinicia_timer0>
}
 1e4:	ff 91       	pop	r31
 1e6:	ef 91       	pop	r30
 1e8:	bf 91       	pop	r27
 1ea:	af 91       	pop	r26
 1ec:	9f 91       	pop	r25
 1ee:	8f 91       	pop	r24
 1f0:	7f 91       	pop	r23
 1f2:	6f 91       	pop	r22
 1f4:	5f 91       	pop	r21
 1f6:	4f 91       	pop	r20
 1f8:	3f 91       	pop	r19
 1fa:	2f 91       	pop	r18
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

Disassembly of section .text.__vector_14:

00000206 <__vector_14>:

ISR(TIMER0_COMPA_vect) {
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	2f 93       	push	r18
 212:	3f 93       	push	r19
 214:	4f 93       	push	r20
 216:	5f 93       	push	r21
 218:	6f 93       	push	r22
 21a:	7f 93       	push	r23
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
 220:	af 93       	push	r26
 222:	bf 93       	push	r27
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
	if (contador_timer0 < tempo_debounce) {
 228:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <contador_timer0>
 22c:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <tempo_debounce>
 230:	89 17       	cp	r24, r25
 232:	20 f4       	brcc	.+8      	; 0x23c <__vector_14+0x36>
		contador_timer0++;
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <contador_timer0>
 23a:	06 c0       	rjmp	.+12     	; 0x248 <__vector_14+0x42>
	}
	else{
		contador_timer0 = 0;
 23c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <contador_timer0>
		debouncing_pc0();
 240:	0e 94 35 01 	call	0x26a	; 0x26a <debouncing_pc0>
		debouncing_pc1();
 244:	0e 94 64 01 	call	0x2c8	; 0x2c8 <debouncing_pc1>
	}
}
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

Disassembly of section .text.main:

00000380 <main>:



int main(void)
{
	DDRD = 0xFF; // Configura PD0-PD7 como saídas
 380:	8f ef       	ldi	r24, 0xFF	; 255
 382:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x3F; // Configura PB0-PB5 como saídas
 384:	8f e3       	ldi	r24, 0x3F	; 63
 386:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x00; // Configura PC0:PC5 como entradas
 388:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x03; //Configura PC0:PC1 como pull-up
 38a:	83 e0       	ldi	r24, 0x03	; 3
 38c:	88 b9       	out	0x08, r24	; 8
	PCICR = 0b00000010; // Habilita interrupção de pin change no PORTC
 38e:	92 e0       	ldi	r25, 0x02	; 2
 390:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK1 = 0b00000011;//Habilita interrupção nos pinos PC0 e PC1
 394:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
	sei(); //Habilita interrupções globais
 398:	78 94       	sei
	
	while (1)
	{
		// Verifica se o contador do display não está pausado e se o contador do timer1 precisa ser reiniciado
		if ((pausado == 0) && (contador_timer1 == 0)) {
 39a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pausado>
 39e:	81 11       	cpse	r24, r1
 3a0:	06 c0       	rjmp	.+12     	; 0x3ae <main+0x2e>
 3a2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <contador_timer1>
 3a6:	81 11       	cpse	r24, r1
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <main+0x2e>
			reinicia_timer1();
 3aa:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <reinicia_timer1>
		}
		
		if (zerado == 1){
 3ae:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <zerado>
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	91 f7       	brne	.-28     	; 0x39a <main+0x1a>
			unidade = 0;
 3b6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_end>
			dezena = 0;
 3ba:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <dezena>
			zerado = 0;
 3be:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <zerado>
 3c2:	eb cf       	rjmp	.-42     	; 0x39a <main+0x1a>

Disassembly of section .text.__dummy_fini:

00000412 <_fini>:
 412:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000414 <__funcs_on_exit>:
 414:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000416 <__simulator_exit>:
 416:	08 95       	ret

Disassembly of section .text.exit:

000003e2 <exit>:
 3e2:	ec 01       	movw	r28, r24
 3e4:	0e 94 0a 02 	call	0x414	; 0x414 <__funcs_on_exit>
 3e8:	0e 94 09 02 	call	0x412	; 0x412 <_fini>
 3ec:	ce 01       	movw	r24, r28
 3ee:	0e 94 0b 02 	call	0x416	; 0x416 <__simulator_exit>
 3f2:	ce 01       	movw	r24, r28
 3f4:	0e 94 07 02 	call	0x40e	; 0x40e <_Exit>

Disassembly of section .text._Exit:

0000040e <_Exit>:
 40e:	0e 94 68 00 	call	0xd0	; 0xd0 <_exit>
