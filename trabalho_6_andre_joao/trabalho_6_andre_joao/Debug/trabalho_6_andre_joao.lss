
trabalho_6_andre_joao.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000060d  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  0000060d  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000060d  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000064a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a0e  00000000  00000000  00000682  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000067e  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046d  00000000  00000000  0000170e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000116  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000512  00000512  000005e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.AtualizaDuty 00000070  00000454  00000454  00000528  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000234  00000134  00000134  00000208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_18 00000038  000004c4  000004c4  00000598  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_20 000000ec  00000368  00000368  0000043c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss.cor      00000002  0080011e  0080011e  0000060d  2**0
                  ALLOC
 20 .data.duty    00000003  0080011b  00000536  0000060a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .bss.flagRCV  00000001  00800122  00800122  0000060d  2**0
                  ALLOC
 22 .bss.frameINPtr 00000002  00800120  00800120  0000060d  2**0
                  ALLOC
 23 .data.frameIN 0000000a  00800111  0000052c  00000600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 24 .progmemx.data.corLetra 00000003  00000131  00000131  00000205  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 25 .progmemx.data 00000063  000000ce  000000ce  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .data.mensagem 0000000c  00800105  00000520  000005f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 27 .text.__dummy_fini 00000002  0000051a  0000051a  000005ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_funcs_on_exit 00000002  0000051c  0000051c  000005f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_simulator_exit 00000002  0000051e  0000051e  000005f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.exit    00000016  000004fc  000004fc  000005d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text._Exit   00000004  00000516  00000516  000005ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
   8:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
   c:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
  10:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
  14:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
  18:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
  1c:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
  20:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
  24:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
  28:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
  2c:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
  30:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
  34:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
  38:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
  3c:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
  40:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
  44:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
  48:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_18>
  4c:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
  50:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_20>
  54:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
  58:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
  5c:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
  60:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>
  64:	0c 94 89 02 	jmp	0x512	; 0x512 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 05       	cpc	r16, r1
  6c:	80 01       	movw	r16, r0
  6e:	05 01       	movw	r0, r10
  70:	1e 00       	.word	0x001e	; ????
  72:	05 20       	and	r0, r5
  74:	01 1e       	adc	r0, r17
  76:	01 23       	and	r16, r17
  78:	80 00       	.word	0x0080	; ????

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	e8 e6       	ldi	r30, 0x68	; 104
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	17 c0       	rjmp	.+46     	; 0xbc <__do_clear_bss+0x8>
  8e:	b5 91       	lpm	r27, Z+
  90:	a5 91       	lpm	r26, Z+
  92:	35 91       	lpm	r19, Z+
  94:	25 91       	lpm	r18, Z+
  96:	05 91       	lpm	r16, Z+
  98:	07 fd       	sbrc	r16, 7
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <__do_clear_bss>
  9c:	95 91       	lpm	r25, Z+
  9e:	85 91       	lpm	r24, Z+
  a0:	ef 01       	movw	r28, r30
  a2:	f9 2f       	mov	r31, r25
  a4:	e8 2f       	mov	r30, r24
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0x20>
  b0:	fe 01       	movw	r30, r28
  b2:	04 c0       	rjmp	.+8      	; 0xbc <__do_clear_bss+0x8>

000000b4 <__do_clear_bss>:
  b4:	1d 92       	st	X+, r1
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__do_clear_bss>
  bc:	e9 37       	cpi	r30, 0x79	; 121
  be:	f4 07       	cpc	r31, r20
  c0:	31 f7       	brne	.-52     	; 0x8e <__do_copy_data+0x8>
  c2:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  c6:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <exit>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>

Disassembly of section .text:

00000512 <__bad_interrupt>:
 512:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.AtualizaDuty:

00000454 <AtualizaDuty>:
int cor = 0; // Cor atual sendo configurada (0 = Vermelho, 1 = Verde, 2 = Azul)

void AtualizaDuty(void)
{
	int i = 1;
	duty[cor] = 0;
 454:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <cor>
 458:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <cor+0x1>
 45c:	fb 01       	movw	r30, r22
 45e:	e5 5e       	subi	r30, 0xE5	; 229
 460:	fe 4f       	sbci	r31, 0xFE	; 254
 462:	10 82       	st	Z, r1
unsigned char duty[3] = {10, 10, 10}; // Array contendo os duty cycles para R, G, B
int cor = 0; // Cor atual sendo configurada (0 = Vermelho, 1 = Verde, 2 = Azul)

void AtualizaDuty(void)
{
	int i = 1;
 464:	41 e0       	ldi	r20, 0x01	; 1
 466:	50 e0       	ldi	r21, 0x00	; 0
	duty[cor] = 0;
	// Converter os caracteres recebidos para um número
	while ((frameIN[i] >= '0') && (frameIN[i] <= '9'))
 468:	0e c0       	rjmp	.+28     	; 0x486 <AtualizaDuty+0x32>
	{
		duty[cor] = duty[cor] * 10 + (frameIN[i] - '0');
 46a:	fb 01       	movw	r30, r22
 46c:	e5 5e       	subi	r30, 0xE5	; 229
 46e:	fe 4f       	sbci	r31, 0xFE	; 254
 470:	90 81       	ld	r25, Z
 472:	99 0f       	add	r25, r25
 474:	29 2f       	mov	r18, r25
 476:	22 0f       	add	r18, r18
 478:	22 0f       	add	r18, r18
 47a:	92 0f       	add	r25, r18
 47c:	89 0f       	add	r24, r25
 47e:	80 53       	subi	r24, 0x30	; 48
 480:	80 83       	st	Z, r24
		i++;
 482:	4f 5f       	subi	r20, 0xFF	; 255
 484:	5f 4f       	sbci	r21, 0xFF	; 255
void AtualizaDuty(void)
{
	int i = 1;
	duty[cor] = 0;
	// Converter os caracteres recebidos para um número
	while ((frameIN[i] >= '0') && (frameIN[i] <= '9'))
 486:	fa 01       	movw	r30, r20
 488:	ef 5e       	subi	r30, 0xEF	; 239
 48a:	fe 4f       	sbci	r31, 0xFE	; 254
 48c:	80 81       	ld	r24, Z
 48e:	90 ed       	ldi	r25, 0xD0	; 208
 490:	98 0f       	add	r25, r24
 492:	9a 30       	cpi	r25, 0x0A	; 10
 494:	50 f3       	brcs	.-44     	; 0x46a <AtualizaDuty+0x16>
	{
		duty[cor] = duty[cor] * 10 + (frameIN[i] - '0');
		i++;
	}
	dutyPtr = &(frameIN[1]);
 496:	82 e1       	ldi	r24, 0x12	; 18
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 49e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTB = duty[cor];
 4a2:	fb 01       	movw	r30, r22
 4a4:	e5 5e       	subi	r30, 0xE5	; 229
 4a6:	fe 4f       	sbci	r31, 0xFE	; 254
 4a8:	80 81       	ld	r24, Z
 4aa:	85 b9       	out	0x05, r24	; 5
	// Atualizar o duty cycle do PWM
	if (cor == 0) OCR0A = duty[cor];
 4ac:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <cor>
 4b0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <cor+0x1>
 4b4:	00 97       	sbiw	r24, 0x00	; 0
 4b6:	29 f4       	brne	.+10     	; 0x4c2 <AtualizaDuty+0x6e>
 4b8:	fc 01       	movw	r30, r24
 4ba:	e5 5e       	subi	r30, 0xE5	; 229
 4bc:	fe 4f       	sbci	r31, 0xFE	; 254
 4be:	80 81       	ld	r24, Z
 4c0:	87 bd       	out	0x27, r24	; 39
 4c2:	08 95       	ret

Disassembly of section .text.main:

00000134 <main>:
}

int main(void)
{
	unsigned char erro;
	DDRB = 0xFF; // Configurar PORTB como saída
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	84 b9       	out	0x04, r24	; 4
	UCSR0A = 0;  // Resetar o registrador de controle e status A do UART
 138:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = 1 << RXCIE0 | 1 << TXCIE0 | 1 << RXEN0 | 1 << TXEN0; // Habilitar RX e TX, e suas interrupções
 13c:	88 ed       	ldi	r24, 0xD8	; 216
 13e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = 1 << UCSZ01 | 1 << UCSZ00; // Configurar formato do quadro: 8 bits de dados, 1 bit de parada
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0H = 0;
 148:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 51; // Configurar taxa de transmissão para 9600 bps com clock de 16 MHz
 14c:	83 e3       	ldi	r24, 0x33	; 51
 14e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	TCCR0A = 0b10000011; // Configurar Timer0 para PWM, Fase Correta
 152:	83 e8       	ldi	r24, 0x83	; 131
 154:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000101; // Configurar prescaler do Timer0
 156:	85 e0       	ldi	r24, 0x05	; 5
 158:	85 bd       	out	0x25, r24	; 37
	DDRD = 0b01000000; // Configurar PD6 (OC0A) como saída
 15a:	80 e4       	ldi	r24, 0x40	; 64
 15c:	8a b9       	out	0x0a, r24	; 10
	OCR0A = (unsigned char)duty[cor]; // Definir duty cycle inicial
 15e:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <cor>
 162:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <cor+0x1>
 166:	e5 5e       	subi	r30, 0xE5	; 229
 168:	fe 4f       	sbci	r31, 0xFE	; 254
 16a:	80 81       	ld	r24, Z
 16c:	87 bd       	out	0x27, r24	; 39
	sei(); // Habilitar interrupções globais
 16e:	78 94       	sei

	while (1)
	{
		if (flagRCV == 1)
 170:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <flagRCV>
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x3c>
		{
			erro = 0;
			flagRCV = 0;
 178:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <flagRCV>
			switch (frameINPtr)
 17c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <frameINPtr>
 180:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <frameINPtr+0x1>
 184:	00 97       	sbiw	r24, 0x00	; 0
 186:	39 f0       	breq	.+14     	; 0x196 <main+0x62>
 188:	0c f4       	brge	.+2      	; 0x18c <main+0x58>
 18a:	c6 c0       	rjmp	.+396    	; 0x318 <main+0x1e4>
 18c:	84 30       	cpi	r24, 0x04	; 4
 18e:	91 05       	cpc	r25, r1
 190:	0c f4       	brge	.+2      	; 0x194 <main+0x60>
 192:	90 c0       	rjmp	.+288    	; 0x2b4 <main+0x180>
 194:	c1 c0       	rjmp	.+386    	; 0x318 <main+0x1e4>
			{
				case 0:
					if ((frameIN[0] == 'L') || (frameIN[0] == 'l'))
 196:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <frameIN>
 19a:	8c 34       	cpi	r24, 0x4C	; 76
 19c:	11 f0       	breq	.+4      	; 0x1a2 <main+0x6e>
 19e:	8c 36       	cpi	r24, 0x6C	; 108
 1a0:	f9 f4       	brne	.+62     	; 0x1e0 <main+0xac>
					{
						DDRD = 0b01000000;
 1a2:	80 e4       	ldi	r24, 0x40	; 64
 1a4:	8a b9       	out	0x0a, r24	; 10
						resposta = mensagem[0];
 1a6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_end>
 1aa:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_end+0x1>
 1ae:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_end+0x2>
						UDR0 = (char)*(resposta++);
 1b2:	9c 01       	movw	r18, r24
 1b4:	4a 2f       	mov	r20, r26
 1b6:	2f 5f       	subi	r18, 0xFF	; 255
 1b8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ba:	4f 4f       	sbci	r20, 0xFF	; 255
 1bc:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <resposta>
 1c0:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <resposta+0x1>
 1c4:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <resposta+0x2>
 1c8:	fc 01       	movw	r30, r24
 1ca:	84 91       	lpm	r24, Z
 1cc:	a7 fd       	sbrc	r26, 7
 1ce:	80 81       	ld	r24, Z
 1d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
						frameINPtr = 0;
 1d4:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <frameINPtr+0x1>
 1d8:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <frameINPtr>

	while (1)
	{
		if (flagRCV == 1)
		{
			erro = 0;
 1dc:	80 e0       	ldi	r24, 0x00	; 0
					if ((frameIN[0] == 'L') || (frameIN[0] == 'l'))
					{
						DDRD = 0b01000000;
						resposta = mensagem[0];
						UDR0 = (char)*(resposta++);
						frameINPtr = 0;
 1de:	a5 c0       	rjmp	.+330    	; 0x32a <main+0x1f6>
					}
					else if ((frameIN[0] == 'D') || (frameIN[0] == 'd'))
 1e0:	84 34       	cpi	r24, 0x44	; 68
 1e2:	11 f0       	breq	.+4      	; 0x1e8 <main+0xb4>
 1e4:	84 36       	cpi	r24, 0x64	; 100
 1e6:	f1 f4       	brne	.+60     	; 0x224 <main+0xf0>
					{
						DDRD = 0b00000000;
 1e8:	1a b8       	out	0x0a, r1	; 10
						resposta = mensagem[1];
 1ea:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_end+0x3>
 1ee:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_end+0x4>
 1f2:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <_end+0x5>
						UDR0 = (char)*(resposta++);
 1f6:	9c 01       	movw	r18, r24
 1f8:	4a 2f       	mov	r20, r26
 1fa:	2f 5f       	subi	r18, 0xFF	; 255
 1fc:	3f 4f       	sbci	r19, 0xFF	; 255
 1fe:	4f 4f       	sbci	r20, 0xFF	; 255
 200:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <resposta>
 204:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <resposta+0x1>
 208:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <resposta+0x2>
 20c:	fc 01       	movw	r30, r24
 20e:	84 91       	lpm	r24, Z
 210:	a7 fd       	sbrc	r26, 7
 212:	80 81       	ld	r24, Z
 214:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
						frameINPtr = 0;
 218:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <frameINPtr+0x1>
 21c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <frameINPtr>

	while (1)
	{
		if (flagRCV == 1)
		{
			erro = 0;
 220:	80 e0       	ldi	r24, 0x00	; 0
					else if ((frameIN[0] == 'D') || (frameIN[0] == 'd'))
					{
						DDRD = 0b00000000;
						resposta = mensagem[1];
						UDR0 = (char)*(resposta++);
						frameINPtr = 0;
 222:	83 c0       	rjmp	.+262    	; 0x32a <main+0x1f6>
					}
					else if ((frameIN[0] == 'R') || (frameIN[0] == 'r') ||
 224:	82 35       	cpi	r24, 0x52	; 82
 226:	59 f0       	breq	.+22     	; 0x23e <main+0x10a>
 228:	82 37       	cpi	r24, 0x72	; 114
 22a:	49 f0       	breq	.+18     	; 0x23e <main+0x10a>
 22c:	87 34       	cpi	r24, 0x47	; 71
 22e:	39 f0       	breq	.+14     	; 0x23e <main+0x10a>
					(frameIN[0] == 'G') || (frameIN[0] == 'g') ||
 230:	87 36       	cpi	r24, 0x67	; 103
 232:	29 f0       	breq	.+10     	; 0x23e <main+0x10a>
 234:	82 34       	cpi	r24, 0x42	; 66
 236:	19 f0       	breq	.+6      	; 0x23e <main+0x10a>
					(frameIN[0] == 'B') || (frameIN[0] == 'b'))
 238:	82 36       	cpi	r24, 0x62	; 98
 23a:	09 f0       	breq	.+2      	; 0x23e <main+0x10a>
 23c:	73 c0       	rjmp	.+230    	; 0x324 <main+0x1f0>
					{
						if ((frameIN[0] == 'R') || (frameIN[0] == 'r')) cor = 0;
 23e:	82 35       	cpi	r24, 0x52	; 82
 240:	11 f0       	breq	.+4      	; 0x246 <main+0x112>
 242:	82 37       	cpi	r24, 0x72	; 114
 244:	21 f4       	brne	.+8      	; 0x24e <main+0x11a>
 246:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <cor+0x1>
 24a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <cor>
						if ((frameIN[0] == 'G') || (frameIN[0] == 'g')) cor = 1;
 24e:	87 34       	cpi	r24, 0x47	; 71
 250:	11 f0       	breq	.+4      	; 0x256 <main+0x122>
 252:	87 36       	cpi	r24, 0x67	; 103
 254:	31 f4       	brne	.+12     	; 0x262 <main+0x12e>
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <cor+0x1>
 25e:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <cor>
						if ((frameIN[0] == 'B') || (frameIN[0] == 'b')) cor = 2;
 262:	82 34       	cpi	r24, 0x42	; 66
 264:	11 f0       	breq	.+4      	; 0x26a <main+0x136>
 266:	82 36       	cpi	r24, 0x62	; 98
 268:	31 f4       	brne	.+12     	; 0x276 <main+0x142>
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <cor+0x1>
 272:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <cor>
						frameINPtr = 1;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <frameINPtr+0x1>
 27e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <frameINPtr>
						resposta = mensagem[3];
 282:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_end+0x9>
 286:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <_end+0xa>
 28a:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <_end+0xb>
						UDR0 = (char)*(resposta++);
 28e:	9c 01       	movw	r18, r24
 290:	4a 2f       	mov	r20, r26
 292:	2f 5f       	subi	r18, 0xFF	; 255
 294:	3f 4f       	sbci	r19, 0xFF	; 255
 296:	4f 4f       	sbci	r20, 0xFF	; 255
 298:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <resposta>
 29c:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <resposta+0x1>
 2a0:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <resposta+0x2>
 2a4:	fc 01       	movw	r30, r24
 2a6:	84 91       	lpm	r24, Z
 2a8:	a7 fd       	sbrc	r26, 7
 2aa:	80 81       	ld	r24, Z
 2ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	while (1)
	{
		if (flagRCV == 1)
		{
			erro = 0;
 2b0:	80 e0       	ldi	r24, 0x00	; 0
						if ((frameIN[0] == 'R') || (frameIN[0] == 'r')) cor = 0;
						if ((frameIN[0] == 'G') || (frameIN[0] == 'g')) cor = 1;
						if ((frameIN[0] == 'B') || (frameIN[0] == 'b')) cor = 2;
						frameINPtr = 1;
						resposta = mensagem[3];
						UDR0 = (char)*(resposta++);
 2b2:	3b c0       	rjmp	.+118    	; 0x32a <main+0x1f6>
					}
					break;
				case 1:
				case 2:
				case 3:
					if ((frameIN[frameINPtr] >= '0') && (frameIN[frameINPtr] <= '9')){
 2b4:	fc 01       	movw	r30, r24
 2b6:	ef 5e       	subi	r30, 0xEF	; 239
 2b8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ba:	20 81       	ld	r18, Z
 2bc:	30 ed       	ldi	r19, 0xD0	; 208
 2be:	32 0f       	add	r19, r18
 2c0:	3a 30       	cpi	r19, 0x0A	; 10
 2c2:	38 f4       	brcc	.+14     	; 0x2d2 <main+0x19e>
						frameINPtr++;
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <frameINPtr+0x1>
 2ca:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <frameINPtr>

	while (1)
	{
		if (flagRCV == 1)
		{
			erro = 0;
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	2c c0       	rjmp	.+88     	; 0x32a <main+0x1f6>
				case 2:
				case 3:
					if ((frameIN[frameINPtr] >= '0') && (frameIN[frameINPtr] <= '9')){
						frameINPtr++;
					}
					else if ((frameIN[frameINPtr] == '\r') || (frameIN[frameINPtr] == '\n')){
 2d2:	2d 30       	cpi	r18, 0x0D	; 13
 2d4:	11 f0       	breq	.+4      	; 0x2da <main+0x1a6>
 2d6:	2a 30       	cpi	r18, 0x0A	; 10
 2d8:	39 f5       	brne	.+78     	; 0x328 <main+0x1f4>
						AtualizaDuty();
 2da:	0e 94 2a 02 	call	0x454	; 0x454 <AtualizaDuty>
						resposta = mensagem[4];
 2de:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <frameIN>
 2e2:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <frameIN+0x1>
 2e6:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <frameIN+0x2>
						UDR0 = (char)*(resposta++);
 2ea:	9c 01       	movw	r18, r24
 2ec:	4a 2f       	mov	r20, r26
 2ee:	2f 5f       	subi	r18, 0xFF	; 255
 2f0:	3f 4f       	sbci	r19, 0xFF	; 255
 2f2:	4f 4f       	sbci	r20, 0xFF	; 255
 2f4:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <resposta>
 2f8:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <resposta+0x1>
 2fc:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <resposta+0x2>
 300:	fc 01       	movw	r30, r24
 302:	84 91       	lpm	r24, Z
 304:	a7 fd       	sbrc	r26, 7
 306:	80 81       	ld	r24, Z
 308:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
						frameINPtr = 0;
 30c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <frameINPtr+0x1>
 310:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <frameINPtr>

	while (1)
	{
		if (flagRCV == 1)
		{
			erro = 0;
 314:	80 e0       	ldi	r24, 0x00	; 0
					}
					else if ((frameIN[frameINPtr] == '\r') || (frameIN[frameINPtr] == '\n')){
						AtualizaDuty();
						resposta = mensagem[4];
						UDR0 = (char)*(resposta++);
						frameINPtr = 0;
 316:	09 c0       	rjmp	.+18     	; 0x32a <main+0x1f6>
					else{
						erro = 1;
					}
					break;
				default:
					frameINPtr = 0;
 318:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <frameINPtr+0x1>
 31c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <frameINPtr>

	while (1)
	{
		if (flagRCV == 1)
		{
			erro = 0;
 320:	80 e0       	ldi	r24, 0x00	; 0
						erro = 1;
					}
					break;
				default:
					frameINPtr = 0;
					break;
 322:	03 c0       	rjmp	.+6      	; 0x32a <main+0x1f6>
						resposta = mensagem[3];
						UDR0 = (char)*(resposta++);
					}
					else
					{
						erro = 1;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	01 c0       	rjmp	.+2      	; 0x32a <main+0x1f6>
						resposta = mensagem[4];
						UDR0 = (char)*(resposta++);
						frameINPtr = 0;
					}
					else{
						erro = 1;
 328:	81 e0       	ldi	r24, 0x01	; 1
					break;
				default:
					frameINPtr = 0;
					break;
			}
			if (erro == 1)
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	09 f0       	breq	.+2      	; 0x330 <main+0x1fc>
 32e:	20 cf       	rjmp	.-448    	; 0x170 <main+0x3c>
			{
				frameINPtr = 0;
 330:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <frameINPtr+0x1>
 334:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <frameINPtr>
				resposta = mensagem[2];
 338:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_end+0x6>
 33c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_end+0x7>
 340:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <_end+0x8>
				UDR0 = (char)*(resposta++);
 344:	9c 01       	movw	r18, r24
 346:	4a 2f       	mov	r20, r26
 348:	2f 5f       	subi	r18, 0xFF	; 255
 34a:	3f 4f       	sbci	r19, 0xFF	; 255
 34c:	4f 4f       	sbci	r20, 0xFF	; 255
 34e:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <resposta>
 352:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <resposta+0x1>
 356:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <resposta+0x2>
 35a:	fc 01       	movw	r30, r24
 35c:	84 91       	lpm	r24, Z
 35e:	a7 fd       	sbrc	r26, 7
 360:	80 81       	ld	r24, Z
 362:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 366:	04 cf       	rjmp	.-504    	; 0x170 <main+0x3c>

Disassembly of section .text.__vector_18:

000004c4 <__vector_18>:
		}
	}
}

ISR(USART_RX_vect)
{
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	8f 93       	push	r24
 4d0:	ef 93       	push	r30
 4d2:	ff 93       	push	r31
	frameIN[frameINPtr] = UDR0;
 4d4:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <frameINPtr>
 4d8:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <frameINPtr+0x1>
 4dc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4e0:	ef 5e       	subi	r30, 0xEF	; 239
 4e2:	fe 4f       	sbci	r31, 0xFE	; 254
 4e4:	80 83       	st	Z, r24
	flagRCV = 1;
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <flagRCV>
}
 4ec:	ff 91       	pop	r31
 4ee:	ef 91       	pop	r30
 4f0:	8f 91       	pop	r24
 4f2:	0f 90       	pop	r0
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	0f 90       	pop	r0
 4f8:	1f 90       	pop	r1
 4fa:	18 95       	reti

Disassembly of section .text.__vector_20:

00000368 <__vector_20>:

ISR(USART_TX_vect)
{
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	2f 93       	push	r18
 374:	8f 93       	push	r24
 376:	9f 93       	push	r25
 378:	af 93       	push	r26
 37a:	ef 93       	push	r30
 37c:	ff 93       	push	r31
	if (*resposta != '\0')
 37e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <resposta>
 382:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <resposta+0x1>
 386:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <resposta+0x2>
 38a:	e2 2f       	mov	r30, r18
 38c:	f9 2f       	mov	r31, r25
 38e:	94 91       	lpm	r25, Z
 390:	87 fd       	sbrc	r24, 7
 392:	90 81       	ld	r25, Z
 394:	99 23       	and	r25, r25
 396:	09 f4       	brne	.+2      	; 0x39a <__vector_20+0x32>
 398:	52 c0       	rjmp	.+164    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
	{
		if (*resposta == 'X')
 39a:	98 35       	cpi	r25, 0x58	; 88
 39c:	89 f4       	brne	.+34     	; 0x3c0 <__vector_20+0x58>
		UDR0 = (char)corLetra[cor];
 39e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <cor>
 3a2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <cor+0x1>
 3a6:	09 2e       	mov	r0, r25
 3a8:	00 0c       	add	r0, r0
 3aa:	aa 0b       	sbc	r26, r26
 3ac:	8f 5c       	subi	r24, 0xCF	; 207
 3ae:	9e 4f       	sbci	r25, 0xFE	; 254
 3b0:	af 4f       	sbci	r26, 0xFF	; 255
 3b2:	fc 01       	movw	r30, r24
 3b4:	84 91       	lpm	r24, Z
 3b6:	a7 fd       	sbrc	r26, 7
 3b8:	80 81       	ld	r24, Z
 3ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3be:	2d c0       	rjmp	.+90     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		else
		{
			if (*resposta == 'Y')
 3c0:	99 35       	cpi	r25, 0x59	; 89
 3c2:	49 f5       	brne	.+82     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
			{
				if ((*dutyPtr >= '0') && (*dutyPtr <= '9'))
 3c4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3c8:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3cc:	80 81       	ld	r24, Z
 3ce:	80 53       	subi	r24, 0x30	; 48
 3d0:	8a 30       	cpi	r24, 0x0A	; 10
 3d2:	50 f4       	brcc	.+20     	; 0x3e8 <__vector_20+0x80>
				UDR0 = *dutyPtr++;
 3d4:	cf 01       	movw	r24, r30
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3e0:	80 81       	ld	r24, Z
 3e2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3e6:	19 c0       	rjmp	.+50     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
				else
				{
					while (*(++resposta) != '\n');
 3e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <resposta>
 3ec:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <resposta+0x1>
 3f0:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <resposta+0x2>
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	a1 1d       	adc	r26, r1
 3f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <resposta>
 3fc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <resposta+0x1>
 400:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <resposta+0x2>
 404:	fc 01       	movw	r30, r24
 406:	84 91       	lpm	r24, Z
 408:	a7 fd       	sbrc	r26, 7
 40a:	80 81       	ld	r24, Z
 40c:	8a 30       	cpi	r24, 0x0A	; 10
 40e:	61 f7       	brne	.-40     	; 0x3e8 <__vector_20+0x80>
					UDR0 = *resposta;
 410:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 414:	02 c0       	rjmp	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
				}
			}
			else
			UDR0 = *resposta;
 416:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		}
		resposta++;
 41a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <resposta>
 41e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <resposta+0x1>
 422:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <resposta+0x2>
 426:	01 96       	adiw	r24, 0x01	; 1
 428:	a1 1d       	adc	r26, r1
 42a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <resposta>
 42e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <resposta+0x1>
 432:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <resposta+0x2>
		frameINPtr = 0;
 436:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <frameINPtr+0x1>
 43a:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <frameINPtr>
	}
 43e:	ff 91       	pop	r31
 440:	ef 91       	pop	r30
 442:	af 91       	pop	r26
 444:	9f 91       	pop	r25
 446:	8f 91       	pop	r24
 448:	2f 91       	pop	r18
 44a:	0f 90       	pop	r0
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	0f 90       	pop	r0
 450:	1f 90       	pop	r1
 452:	18 95       	reti

Disassembly of section .text.__dummy_fini:

0000051a <_fini>:
 51a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000051c <__funcs_on_exit>:
 51c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000051e <__simulator_exit>:
 51e:	08 95       	ret

Disassembly of section .text.exit:

000004fc <exit>:
 4fc:	ec 01       	movw	r28, r24
 4fe:	0e 94 8e 02 	call	0x51c	; 0x51c <__funcs_on_exit>
 502:	0e 94 8d 02 	call	0x51a	; 0x51a <_fini>
 506:	ce 01       	movw	r24, r28
 508:	0e 94 8f 02 	call	0x51e	; 0x51e <__simulator_exit>
 50c:	ce 01       	movw	r24, r28
 50e:	0e 94 8b 02 	call	0x516	; 0x516 <_Exit>

Disassembly of section .text._Exit:

00000516 <_Exit>:
 516:	0e 94 65 00 	call	0xca	; 0xca <_exit>
